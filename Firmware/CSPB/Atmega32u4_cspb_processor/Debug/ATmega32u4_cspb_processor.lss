
ATmega32u4_cspb_processor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  0000254a  000025de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000254a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023b  00800198  00800198  00002676  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f0  00000000  00000000  00002718  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cfd0  00000000  00000000  00002d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d11  00000000  00000000  0000fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034a6  00000000  00000000  000129e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001104  00000000  00000000  00015e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000037e5  00000000  00000000  00016f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c98  00000000  00000000  0001a779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00020411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_10>
      2c:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_11>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      4c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_23>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      6c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      70:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      74:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      78:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      7c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      80:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      84:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      88:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      8c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      90:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_36>
      94:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      98:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      9c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      a8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      ac:	ab 0b       	sbc	r26, r27
      ae:	ae 0b       	sbc	r26, r30
      b0:	9d 0b       	sbc	r25, r29
      b2:	a1 0b       	sbc	r26, r17
      b4:	a7 0b       	sbc	r26, r23
      b6:	cf 0b       	sbc	r28, r31
      b8:	cf 0b       	sbc	r28, r31
      ba:	cf 0b       	sbc	r28, r31
      bc:	b2 0b       	sbc	r27, r18
      be:	b6 0b       	sbc	r27, r22
      c0:	ba 0b       	sbc	r27, r26
      c2:	c0 0b       	sbc	r28, r16
      c4:	c4 0b       	sbc	r28, r20
      c6:	cf 0b       	sbc	r28, r31
      c8:	ca 0b       	sbc	r28, r26

000000ca <__trampolines_end>:
      ca:	08 0b       	sbc	r16, r24
      cc:	00 02       	muls	r16, r16
      ce:	02 02       	muls	r16, r18
      d0:	00 00       	nop
      d2:	09 04       	cpc	r0, r9
      d4:	00 00       	nop
      d6:	01 02       	muls	r16, r17
      d8:	02 00       	.word	0x0002	; ????
      da:	00 05       	cpc	r16, r0
      dc:	24 00       	.word	0x0024	; ????
      de:	10 01       	movw	r2, r0
      e0:	05 24       	eor	r0, r5
      e2:	01 01       	movw	r0, r2
      e4:	01 04       	cpc	r0, r1
      e6:	24 02       	muls	r18, r20
      e8:	06 05       	cpc	r16, r6
      ea:	24 06       	cpc	r2, r20
      ec:	00 01       	movw	r0, r0
      ee:	07 05       	cpc	r16, r7
      f0:	81 03       	fmuls	r16, r17
      f2:	10 00       	.word	0x0010	; ????
      f4:	40 09       	sbc	r20, r0
      f6:	04 01       	movw	r0, r8
      f8:	00 02       	muls	r16, r16
      fa:	0a 00       	.word	0x000a	; ????
      fc:	00 00       	nop
      fe:	07 05       	cpc	r16, r7
     100:	02 02       	muls	r16, r18
     102:	40 00       	.word	0x0040	; ????
     104:	00 07       	cpc	r16, r16
     106:	05 83       	std	Z+5, r16	; 0x05
     108:	02 40       	sbci	r16, 0x02	; 2
	...

0000010c <USB_DeviceDescriptorIAD>:
     10c:	12 01 00 02 ef 02 01 40 9a 23 0d 80 00 01 01 02     .......@.#......
     11c:	03 01                                               ..

0000011e <STRING_MANUFACTURER>:
     11e:	41 64 61 66 72 75 69 74 00                          Adafruit.

00000127 <STRING_PRODUCT>:
     127:	49 74 73 79 42 69 74 73 79 20 33 32 75 34 20 33     ItsyBitsy 32u4 3
     137:	56 20 38 4d 48 7a 00                                V 8MHz.

0000013e <STRING_LANGUAGE>:
     13e:	04 03 09 04                                         ....

00000142 <digital_pin_to_timer_PGM>:
     142:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000161 <digital_pin_to_bit_mask_PGM>:
     161:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     171:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000180 <digital_pin_to_port_PGM>:
     180:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     190:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000019f <port_to_input_PGM>:
     19f:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001ad <port_to_output_PGM>:
     1ad:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001bb <port_to_mode_PGM>:
     1bb:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00 00        ....$.'.*.-.0..

000001ca <__ctors_start>:
     1ca:	4d 05       	cpc	r20, r13
     1cc:	5b 0d       	add	r21, r11

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	da e0       	ldi	r29, 0x0A	; 10
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	11 e0       	ldi	r17, 0x01	; 1
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	ea e4       	ldi	r30, 0x4A	; 74
     1e2:	f5 e2       	ldi	r31, 0x25	; 37
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x10>
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	a8 39       	cpi	r26, 0x98	; 152
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0xc>

000001f0 <__do_clear_bss>:
     1f0:	23 e0       	ldi	r18, 0x03	; 3
     1f2:	a8 e9       	ldi	r26, 0x98	; 152
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a3 3d       	cpi	r26, 0xD3	; 211
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>

00000200 <__do_global_ctors>:
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	c7 ee       	ldi	r28, 0xE7	; 231
     204:	d0 e0       	ldi	r29, 0x00	; 0
     206:	04 c0       	rjmp	.+8      	; 0x210 <__do_global_ctors+0x10>
     208:	21 97       	sbiw	r28, 0x01	; 1
     20a:	fe 01       	movw	r30, r28
     20c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__tablejump2__>
     210:	c5 3e       	cpi	r28, 0xE5	; 229
     212:	d1 07       	cpc	r29, r17
     214:	c9 f7       	brne	.-14     	; 0x208 <__do_global_ctors+0x8>
     216:	0e 94 63 05 	call	0xac6	; 0xac6 <main>
     21a:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     222:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <eeprom_read_byte>

00000226 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     226:	dc 01       	movw	r26, r24
     228:	ed 91       	ld	r30, X+
     22a:	fc 91       	ld	r31, X
     22c:	01 90       	ld	r0, Z+
     22e:	f0 81       	ld	r31, Z
     230:	e0 2d       	mov	r30, r0
     232:	09 94       	ijmp

00000234 <_Z20waitForShutdownStatei>:

/**
/ waitForShutdownState
**/
void waitForShutdownState(int slot)
{
     234:	4f 92       	push	r4
     236:	5f 92       	push	r5
     238:	6f 92       	push	r6
     23a:	7f 92       	push	r7
     23c:	8f 92       	push	r8
     23e:	9f 92       	push	r9
     240:	af 92       	push	r10
     242:	bf 92       	push	r11
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	ec 01       	movw	r28, r24
  unsigned long timeOut = 1000 * EEPROM.read(EEPROM_SHUTDOWN_TIME_OUT); // Convert to seconds.
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     25a:	28 ee       	ldi	r18, 0xE8	; 232
     25c:	33 e0       	ldi	r19, 0x03	; 3
     25e:	48 2f       	mov	r20, r24
     260:	42 9f       	mul	r20, r18
     262:	c0 01       	movw	r24, r0
     264:	43 9f       	mul	r20, r19
     266:	90 0d       	add	r25, r0
     268:	11 24       	eor	r1, r1
     26a:	4c 01       	movw	r8, r24
     26c:	99 0f       	add	r25, r25
     26e:	aa 08       	sbc	r10, r10
     270:	bb 08       	sbc	r11, r11
  unsigned long StartTime = millis();
     272:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <millis>
     276:	2b 01       	movw	r4, r22
     278:	3c 01       	movw	r6, r24
  unsigned long ElapsedTime = 0;

  do {
	  CurrentTime = millis();
	  ElapsedTime = CurrentTime - StartTime;
    if (digitalRead(MONITOR_PIN[slot]) == LOW) {
     27a:	cc 0f       	add	r28, r28
     27c:	dd 1f       	adc	r29, r29
     27e:	c4 5b       	subi	r28, 0xB4	; 180
     280:	de 4f       	sbci	r29, 0xFE	; 254
  unsigned long StartTime = millis();
  unsigned long CurrentTime = 0;
  unsigned long ElapsedTime = 0;

  do {
	  CurrentTime = millis();
     282:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <millis>
     286:	6b 01       	movw	r12, r22
     288:	7c 01       	movw	r14, r24
	  ElapsedTime = CurrentTime - StartTime;
    if (digitalRead(MONITOR_PIN[slot]) == LOW) {
     28a:	88 81       	ld	r24, Y
     28c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <digitalRead>
     290:	89 2b       	or	r24, r25
     292:	79 f0       	breq	.+30     	; 0x2b2 <_Z20waitForShutdownStatei+0x7e>
      ElapsedTime = timeOut; // SBC has shutdown, break out of loop.
    }
    else {
      delay(50); //50 milliseconds
     294:	62 e3       	ldi	r22, 0x32	; 50
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>
    }
  } while (ElapsedTime < timeOut);  // in milliseconds
     2a0:	c4 18       	sub	r12, r4
     2a2:	d5 08       	sbc	r13, r5
     2a4:	e6 08       	sbc	r14, r6
     2a6:	f7 08       	sbc	r15, r7
     2a8:	c8 14       	cp	r12, r8
     2aa:	d9 04       	cpc	r13, r9
     2ac:	ea 04       	cpc	r14, r10
     2ae:	fb 04       	cpc	r15, r11
     2b0:	40 f3       	brcs	.-48     	; 0x282 <_Z20waitForShutdownStatei+0x4e>
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	bf 90       	pop	r11
     2c0:	af 90       	pop	r10
     2c2:	9f 90       	pop	r9
     2c4:	8f 90       	pop	r8
     2c6:	7f 90       	pop	r7
     2c8:	6f 90       	pop	r6
     2ca:	5f 90       	pop	r5
     2cc:	4f 90       	pop	r4
     2ce:	08 95       	ret

000002d0 <_Z14get_port_statePKi>:

/************************************************************************/
/* get_port_state                                                                     */
/************************************************************************/
int get_port_state(const int port_list[4])
{
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	7c 01       	movw	r14, r24
	 int port_states = 0;
	 int value = 0;
	 for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++) {
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	10 e0       	ldi	r17, 0x00	; 0
/************************************************************************/
/* get_port_state                                                                     */
/************************************************************************/
int get_port_state(const int port_list[4])
{
	 int port_states = 0;
     2e6:	c0 e0       	ldi	r28, 0x00	; 0
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
	 int value = 0;
	 for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++) {
		 if (port_list[slot] != 99) { // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
     2ea:	f7 01       	movw	r30, r14
     2ec:	81 91       	ld	r24, Z+
     2ee:	91 91       	ld	r25, Z+
     2f0:	7f 01       	movw	r14, r30
     2f2:	83 36       	cpi	r24, 0x63	; 99
     2f4:	91 05       	cpc	r25, r1
     2f6:	19 f0       	breq	.+6      	; 0x2fe <_Z14get_port_statePKi+0x2e>
			value = digitalRead(port_list[slot]);
     2f8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <digitalRead>
     2fc:	06 c0       	rjmp	.+12     	; 0x30a <_Z14get_port_statePKi+0x3a>
			port_states = port_states | (value << slot);
		 }
		 else {
			 value = (PINE & (1 << PINE2)) >> PINE2;
     2fe:	8c b1       	in	r24, 0x0c	; 12
			 port_states = port_states | (value << slot);
     300:	82 fb       	bst	r24, 2
     302:	cc 24       	eor	r12, r12
     304:	c0 f8       	bld	r12, 0
     306:	d1 2c       	mov	r13, r1
     308:	c6 01       	movw	r24, r12
     30a:	00 2e       	mov	r0, r16
     30c:	02 c0       	rjmp	.+4      	; 0x312 <_Z14get_port_statePKi+0x42>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	0a 94       	dec	r0
     314:	e2 f7       	brpl	.-8      	; 0x30e <_Z14get_port_statePKi+0x3e>
     316:	c8 2b       	or	r28, r24
     318:	d9 2b       	or	r29, r25
/************************************************************************/
int get_port_state(const int port_list[4])
{
	 int port_states = 0;
	 int value = 0;
	 for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++) {
     31a:	0f 5f       	subi	r16, 0xFF	; 255
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	04 30       	cpi	r16, 0x04	; 4
     320:	11 05       	cpc	r17, r1
     322:	19 f7       	brne	.-58     	; 0x2ea <_Z14get_port_statePKi+0x1a>
			 value = (PINE & (1 << PINE2)) >> PINE2;
			 port_states = port_states | (value << slot);
		 }
	 }
	 return port_states;
}
     324:	ce 01       	movw	r24, r28
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	08 95       	ret

00000338 <_Z11setPinStateii>:
/ setPinState
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
     338:	83 36       	cpi	r24, 0x63	; 99
     33a:	91 05       	cpc	r25, r1
     33c:	11 f0       	breq	.+4      	; 0x342 <_Z11setPinStateii+0xa>
		digitalWrite(pinNumber, state);
     33e:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <digitalWrite>
	else {
		int port_status = PINE;
     342:	8c b1       	in	r24, 0x0c	; 12
		// TODO: OR current pin status then write new status.
		if (state == LOW)
     344:	67 2b       	or	r22, r23
     346:	11 f4       	brne	.+4      	; 0x34c <_Z11setPinStateii+0x14>
			PORTE &= ~(1 << 2); // low
     348:	72 98       	cbi	0x0e, 2	; 14
     34a:	08 95       	ret
		else
			PORTE |= (1 << 2); // high
     34c:	72 9a       	sbi	0x0e, 2	; 14
     34e:	08 95       	ret

00000350 <setup>:
unsigned long previousMillis = 0; //  Store last time LED was updated

//
// Setup
//
void setup() {
     350:	8f 92       	push	r8
     352:	9f 92       	push	r9
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29

  pinMode(STATUS_LED, OUTPUT);     // Analog Pin - Test LED
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	86 e1       	ldi	r24, 0x16	; 22
     36c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
  pinMode(TX_RX_LED, OUTPUT);      // Analog Pin - Board Status.
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	87 e1       	ldi	r24, 0x17	; 23
     374:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
  pinMode(ALT_ADDRESS, INPUT);     // Alternate address header
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	8b e0       	ldi	r24, 0x0B	; 11
     37c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
  pinMode(DEFAULT_ADDRESS, INPUT); // Default address header
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	87 e0       	ldi	r24, 0x07	; 7
     384:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
  DDRE |= (1 << 2);                // Set HWB pin as output. This is used for power relay 4 know as pin 99.
     388:	6a 9a       	sbi	0x0d, 2	; 13
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	86 e1       	ldi	r24, 0x16	; 22
     38e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	87 e1       	ldi	r24, 0x17	; 23
     396:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
     39a:	8c e5       	ldi	r24, 0x5C	; 92
     39c:	e8 2e       	mov	r14, r24
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	f8 2e       	mov	r15, r24
     3a2:	04 e5       	ldi	r16, 0x54	; 84
     3a4:	11 e0       	ldi	r17, 0x01	; 1
     3a6:	9c e4       	ldi	r25, 0x4C	; 76
     3a8:	a9 2e       	mov	r10, r25
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	b9 2e       	mov	r11, r25
     3ae:	e7 01       	movw	r28, r14

  // Set pin modes for power, shutdown and monitor functions.
  // Default the power relays to low (off). No power to the slot.
  // Default shutdown signals to low. Transition to high is a shutdown request.
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++) {
    pinMode(POWER_PIN[slot], OUTPUT);
     3b0:	88 80       	ld	r8, Y
     3b2:	c9 80       	ldd	r12, Y+1	; 0x01
     3b4:	22 96       	adiw	r28, 0x02	; 2
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	88 2d       	mov	r24, r8
     3ba:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
    pinMode(SHUTDOWN_PIN[slot], OUTPUT);
     3be:	d8 01       	movw	r26, r16
     3c0:	9c 90       	ld	r9, X
     3c2:	11 96       	adiw	r26, 0x01	; 1
     3c4:	dc 90       	ld	r13, X
     3c6:	0e 5f       	subi	r16, 0xFE	; 254
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	89 2d       	mov	r24, r9
     3ce:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
    pinMode(MONITOR_PIN[slot], INPUT);
     3d2:	f5 01       	movw	r30, r10
     3d4:	80 81       	ld	r24, Z
     3d6:	f2 e0       	ldi	r31, 0x02	; 2
     3d8:	af 0e       	add	r10, r31
     3da:	b1 1c       	adc	r11, r1
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <pinMode>
    setPinState(POWER_PIN[slot], LOW);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	88 2d       	mov	r24, r8
     3e8:	9c 2d       	mov	r25, r12
     3ea:	0e 94 9c 01 	call	0x338	; 0x338 <_Z11setPinStateii>
    setPinState(SHUTDOWN_PIN[slot], LOW);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	89 2d       	mov	r24, r9
     3f4:	9d 2d       	mov	r25, r13
     3f6:	0e 94 9c 01 	call	0x338	; 0x338 <_Z11setPinStateii>
  setPinState(TX_RX_LED, HIGH);   // In setup phase.

  // Set pin modes for power, shutdown and monitor functions.
  // Default the power relays to low (off). No power to the slot.
  // Default shutdown signals to low. Transition to high is a shutdown request.
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++) {
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	c4 36       	cpi	r28, 0x64	; 100
     3fe:	d2 07       	cpc	r29, r18
     400:	b9 f6       	brne	.-82     	; 0x3b0 <setup+0x60>
    setPinState(SHUTDOWN_PIN[slot], LOW);
  }

  // Setup i2c bus address.
  int addr;
  if (digitalRead(DEFAULT_ADDRESS) == HIGH) // Header installed to Vcc.
     402:	87 e0       	ldi	r24, 0x07	; 7
     404:	0e 94 3b 0c 	call	0x1876	; 0x1876 <digitalRead>
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	61 f0       	breq	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
    addr = 48; // 0x30
  else if (digitalRead(ALT_ADDRESS) == HIGH) // Header installed to Vcc.
     40c:	8b e0       	ldi	r24, 0x0B	; 11
     40e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <digitalRead>
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	51 f0       	breq	.+20     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
    addr = 21; // 0x15
  else
    addr = EEPROM.read(EEPROM_I2C_ADDR); // Note - address 0x00 through 0x07 are reserved addresses. Do not use.
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     41e:	68 2f       	mov	r22, r24
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	05 c0       	rjmp	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
  }

  // Setup i2c bus address.
  int addr;
  if (digitalRead(DEFAULT_ADDRESS) == HIGH) // Header installed to Vcc.
    addr = 48; // 0x30
     424:	60 e3       	ldi	r22, 0x30	; 48
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
  else if (digitalRead(ALT_ADDRESS) == HIGH) // Header installed to Vcc.
    addr = 21; // 0x15
     42a:	65 e1       	ldi	r22, 0x15	; 21
     42c:	70 e0       	ldi	r23, 0x00	; 0
  else
    addr = EEPROM.read(EEPROM_I2C_ADDR); // Note - address 0x00 through 0x07 are reserved addresses. Do not use.

  Wire.begin(addr);
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN7TwoWire5beginEi>

  // Read default power up config and set ports accordingly.
  unsigned int pwr_config = EEPROM.read(EEPROM_CSPB_BOOT_DATA);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     43e:	08 2f       	mov	r16, r24
     440:	10 e0       	ldi	r17, 0x00	; 0
  unsigned int pwr_delay = EEPROM.read(EEPROM_POWER_UP_DELAY) * 20;
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     44a:	34 e1       	ldi	r19, 0x14	; 20
     44c:	83 9f       	mul	r24, r19
     44e:	c0 01       	movw	r24, r0
     450:	11 24       	eor	r1, r1
  int power_on = 0;
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     452:	c0 e0       	ldi	r28, 0x00	; 0
     454:	d0 e0       	ldi	r29, 0x00	; 0
    power_on = (pwr_config >> slot) & 1;
    if (power_on == 1) {
		setPinState(POWER_PIN[slot], HIGH);
		delay(pwr_delay);
     456:	4c 01       	movw	r8, r24
     458:	99 0f       	add	r25, r25
     45a:	aa 08       	sbc	r10, r10
     45c:	bb 08       	sbc	r11, r11
  unsigned int pwr_config = EEPROM.read(EEPROM_CSPB_BOOT_DATA);
  unsigned int pwr_delay = EEPROM.read(EEPROM_POWER_UP_DELAY) * 20;
  int power_on = 0;
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
    power_on = (pwr_config >> slot) & 1;
    if (power_on == 1) {
     45e:	c8 01       	movw	r24, r16
     460:	0c 2e       	mov	r0, r28
     462:	02 c0       	rjmp	.+4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     46c:	80 ff       	sbrs	r24, 0
     46e:	0b c0       	rjmp	.+22     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		setPinState(POWER_PIN[slot], HIGH);
     470:	61 e0       	ldi	r22, 0x01	; 1
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	f7 01       	movw	r30, r14
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	0e 94 9c 01 	call	0x338	; 0x338 <_Z11setPinStateii>
		delay(pwr_delay);
     47e:	c5 01       	movw	r24, r10
     480:	b4 01       	movw	r22, r8
     482:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>

  // Read default power up config and set ports accordingly.
  unsigned int pwr_config = EEPROM.read(EEPROM_CSPB_BOOT_DATA);
  unsigned int pwr_delay = EEPROM.read(EEPROM_POWER_UP_DELAY) * 20;
  int power_on = 0;
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     486:	21 96       	adiw	r28, 0x01	; 1
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	ef 0e       	add	r14, r31
     48c:	f1 1c       	adc	r15, r1
     48e:	c4 30       	cpi	r28, 0x04	; 4
     490:	d1 05       	cpc	r29, r1
     492:	29 f7       	brne	.-54     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
		delay(pwr_delay);
	}
  }

  // Initialize receive data signal and buffer.
  received = 0;
     494:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <received>
  memset(databuf, 0, sizeof(databuf));
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	e0 ea       	ldi	r30, 0xA0	; 160
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	df 01       	movw	r26, r30
     4a2:	9c 01       	movw	r18, r24
     4a4:	1d 92       	st	X+, r1
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	30 40       	sbci	r19, 0x00	; 0
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>

  // register events
  Wire.onReceive(receiveEvent);
     4ac:	6f e9       	ldi	r22, 0x9F	; 159
     4ae:	73 e0       	ldi	r23, 0x03	; 3
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(requestEvent);
     4b8:	66 e0       	ldi	r22, 0x06	; 6
     4ba:	74 e0       	ldi	r23, 0x04	; 4
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	0e 94 56 0d 	call	0x1aac	; 0x1aac <_ZN7TwoWire9onRequestEPFvvE>

  Serial.begin(9600); // start serial monitor
     4c4:	40 e8       	ldi	r20, 0x80	; 128
     4c6:	55 e2       	ldi	r21, 0x25	; 37
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	80 ea       	ldi	r24, 0xA0	; 160
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 47 05 	call	0xa8e	; 0xa8e <_ZN7Serial_5beginEm>
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	87 e1       	ldi	r24, 0x17	; 23
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);

  Serial.begin(9600); // start serial monitor
  setPinState(TX_RX_LED, LOW);  // Setup finished.
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	bf 90       	pop	r11
     4ea:	af 90       	pop	r10
     4ec:	9f 90       	pop	r9
     4ee:	8f 90       	pop	r8
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     4f0:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <digitalWrite>

000004f4 <_Z12setSlotPowerj>:

/**
  / setSlotPower
**/
void setSlotPower(unsigned int value)
{
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
	int state = LOW;
	int power_on = 0;
	char *endptr;

	//value = strtol(value, &endptr, 16)- 48;
	value = value - 48;
     504:	c0 97       	sbiw	r24, 0x30	; 48
     506:	6c 01       	movw	r12, r24
	Serial.println(value);
     508:	4a e0       	ldi	r20, 0x0A	; 10
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	bc 01       	movw	r22, r24
     50e:	80 ea       	ldi	r24, 0xA0	; 160
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN5Print7printlnEji>
     516:	8c e5       	ldi	r24, 0x5C	; 92
     518:	e8 2e       	mov	r14, r24
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	f8 2e       	mov	r15, r24
	
	for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     51e:	c0 e0       	ldi	r28, 0x00	; 0
     520:	d0 e0       	ldi	r29, 0x00	; 0
		power_on = (value >> slot) & 1;
     522:	86 01       	movw	r16, r12
     524:	0c 2e       	mov	r0, r28
     526:	02 c0       	rjmp	.+4      	; 0x52c <_Z12setSlotPowerj+0x38>
     528:	16 95       	lsr	r17
     52a:	07 95       	ror	r16
     52c:	0a 94       	dec	r0
     52e:	e2 f7       	brpl	.-8      	; 0x528 <_Z12setSlotPowerj+0x34>
     530:	01 70       	andi	r16, 0x01	; 1
     532:	11 27       	eor	r17, r17
		Serial.println(power_on);
     534:	4a e0       	ldi	r20, 0x0A	; 10
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	b8 01       	movw	r22, r16
     53a:	80 ea       	ldi	r24, 0xA0	; 160
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print7printlnEii>
		if (power_on == HIGH)
			state = HIGH;
		else
			state = LOW;
		
		setPinState( POWER_PIN[slot],  state);
     542:	b8 01       	movw	r22, r16
     544:	f7 01       	movw	r30, r14
     546:	81 91       	ld	r24, Z+
     548:	91 91       	ld	r25, Z+
     54a:	7f 01       	movw	r14, r30
     54c:	0e 94 9c 01 	call	0x338	; 0x338 <_Z11setPinStateii>

	//value = strtol(value, &endptr, 16)- 48;
	value = value - 48;
	Serial.println(value);
	
	for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     550:	21 96       	adiw	r28, 0x01	; 1
     552:	c4 30       	cpi	r28, 0x04	; 4
     554:	d1 05       	cpc	r29, r1
     556:	29 f7       	brne	.-54     	; 0x522 <_Z12setSlotPowerj+0x2e>
			state = LOW;
		
		setPinState( POWER_PIN[slot],  state);
	}

} // end setSlotPower
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	08 95       	ret

0000056a <_Z20signalShutdownOnSloti>:

/**
  / signalShutdownOnSlot
**/
void signalShutdownOnSlot(int slot)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	8c 01       	movw	r16, r24
  unsigned int signal_hold = EEPROM.read(EEPROM_SHUTDOWN_SIGNAL_HOLD_TIME) * 20;
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     57a:	c8 2f       	mov	r28, r24

  setPinState(SHUTDOWN_PIN[slot], HIGH);
     57c:	00 0f       	add	r16, r16
     57e:	11 1f       	adc	r17, r17
     580:	f8 01       	movw	r30, r16
     582:	ec 5a       	subi	r30, 0xAC	; 172
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	00 81       	ld	r16, Z
     588:	11 81       	ldd	r17, Z+1	; 0x01
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	c8 01       	movw	r24, r16
     590:	0e 94 9c 01 	call	0x338	; 0x338 <_Z11setPinStateii>
  delay(signal_hold);
     594:	84 e1       	ldi	r24, 0x14	; 20
     596:	c8 9f       	mul	r28, r24
     598:	b0 01       	movw	r22, r0
     59a:	11 24       	eor	r1, r1
     59c:	07 2e       	mov	r0, r23
     59e:	00 0c       	add	r0, r0
     5a0:	88 0b       	sbc	r24, r24
     5a2:	99 0b       	sbc	r25, r25
     5a4:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>
  setPinState(SHUTDOWN_PIN[slot], LOW);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	c8 01       	movw	r24, r16
}
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
{
  unsigned int signal_hold = EEPROM.read(EEPROM_SHUTDOWN_SIGNAL_HOLD_TIME) * 20;

  setPinState(SHUTDOWN_PIN[slot], HIGH);
  delay(signal_hold);
  setPinState(SHUTDOWN_PIN[slot], LOW);
     5b4:	0c 94 9c 01 	jmp	0x338	; 0x338 <_Z11setPinStateii>

000005b8 <_Z13powerDownSloti>:
/**
  / powerDownSlot
**/
void powerDownSlot(int slot)
{
  setPinState(POWER_PIN[slot], LOW);
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	fc 01       	movw	r30, r24
     5be:	e4 5a       	subi	r30, 0xA4	; 164
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	91 81       	ldd	r25, Z+1	; 0x01
     5ca:	0c 94 9c 01 	jmp	0x338	; 0x338 <_Z11setPinStateii>

000005ce <_Z12ShutdownSlotj>:

/**
  / ShutdownSlot
**/
void ShutdownSlot(unsigned int value)
{
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	8c 01       	movw	r16, r24
  is_in_shutdown = true;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <is_in_shutdown>
  int signalShutdown = 0;
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     5de:	c0 e0       	ldi	r28, 0x00	; 0
     5e0:	d0 e0       	ldi	r29, 0x00	; 0
    signalShutdown = (value >> slot) & 1;
    if (signalShutdown == 1) {
     5e2:	c8 01       	movw	r24, r16
     5e4:	0c 2e       	mov	r0, r28
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <_Z12ShutdownSlotj+0x1e>
     5e8:	96 95       	lsr	r25
     5ea:	87 95       	ror	r24
     5ec:	0a 94       	dec	r0
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <_Z12ShutdownSlotj+0x1a>
     5f0:	80 ff       	sbrs	r24, 0
     5f2:	09 c0       	rjmp	.+18     	; 0x606 <_Z12ShutdownSlotj+0x38>
      signalShutdownOnSlot(slot);
     5f4:	ce 01       	movw	r24, r28
     5f6:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z20signalShutdownOnSloti>
      waitForShutdownState(slot);
     5fa:	ce 01       	movw	r24, r28
     5fc:	0e 94 1a 01 	call	0x234	; 0x234 <_Z20waitForShutdownStatei>
      powerDownSlot(slot);
     600:	ce 01       	movw	r24, r28
     602:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_Z13powerDownSloti>
**/
void ShutdownSlot(unsigned int value)
{
  is_in_shutdown = true;
  int signalShutdown = 0;
  for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     606:	21 96       	adiw	r28, 0x01	; 1
     608:	c4 30       	cpi	r28, 0x04	; 4
     60a:	d1 05       	cpc	r29, r1
     60c:	51 f7       	brne	.-44     	; 0x5e2 <_Z12ShutdownSlotj+0x14>
      signalShutdownOnSlot(slot);
      waitForShutdownState(slot);
      powerDownSlot(slot);
    }
  }
  is_in_shutdown = false;
     60e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <is_in_shutdown>
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <_Z14processCommandv>:

/**
  / Process the single character command.
**/
void processCommand()
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
  unsigned int cmd = databuf[1];
     624:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <databuf+0x1>
     628:	90 e0       	ldi	r25, 0x00	; 0

  if (cmd == '!') { // Power on/off slot.
     62a:	81 32       	cpi	r24, 0x21	; 33
     62c:	91 05       	cpc	r25, r1
     62e:	49 f4       	brne	.+18     	; 0x642 <_Z14processCommandv+0x26>
    unsigned int value = databuf[2];
    setSlotPower(value);
     630:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <databuf+0x2>
     634:	90 e0       	ldi	r25, 0x00	; 0
	}
  }
  else if (cmd == 'R') { // Set the register read address for next register data request.
	  register_address = databuf[2];
  }
} // end processCommand
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
{
  unsigned int cmd = databuf[1];

  if (cmd == '!') { // Power on/off slot.
    unsigned int value = databuf[2];
    setSlotPower(value);
     63e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_Z12setSlotPowerj>
  }
  else if (cmd == '#') { // SBC to shutdown.
     642:	83 32       	cpi	r24, 0x23	; 35
     644:	91 05       	cpc	r25, r1
     646:	49 f4       	brne	.+18     	; 0x65a <_Z14processCommandv+0x3e>
    unsigned int value = databuf[2];
    ShutdownSlot(value);
     648:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <databuf+0x2>
     64c:	90 e0       	ldi	r25, 0x00	; 0
	}
  }
  else if (cmd == 'R') { // Set the register read address for next register data request.
	  register_address = databuf[2];
  }
} // end processCommand
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
    unsigned int value = databuf[2];
    setSlotPower(value);
  }
  else if (cmd == '#') { // SBC to shutdown.
    unsigned int value = databuf[2];
    ShutdownSlot(value);
     656:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_Z12ShutdownSlotj>
  }
  else if (cmd == '$') { // Signal shutdown line.
     65a:	84 32       	cpi	r24, 0x24	; 36
     65c:	91 05       	cpc	r25, r1
     65e:	b1 f4       	brne	.+44     	; 0x68c <_Z14processCommandv+0x70>
    unsigned int value = databuf[2];
     660:	00 91 a2 01 	lds	r16, 0x01A2	; 0x8001a2 <databuf+0x2>
     664:	10 e0       	ldi	r17, 0x00	; 0
    int signalShutdown = 0;
    for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     666:	c0 e0       	ldi	r28, 0x00	; 0
     668:	d0 e0       	ldi	r29, 0x00	; 0
      signalShutdown = (value >> slot) & 1;
      if (signalShutdown == 1) {
     66a:	c8 01       	movw	r24, r16
     66c:	0c 2e       	mov	r0, r28
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_Z14processCommandv+0x58>
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <_Z14processCommandv+0x54>
     678:	80 ff       	sbrs	r24, 0
     67a:	03 c0       	rjmp	.+6      	; 0x682 <_Z14processCommandv+0x66>
        signalShutdownOnSlot(slot);
     67c:	ce 01       	movw	r24, r28
     67e:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z20signalShutdownOnSloti>
    ShutdownSlot(value);
  }
  else if (cmd == '$') { // Signal shutdown line.
    unsigned int value = databuf[2];
    int signalShutdown = 0;
    for (int slot = 0; slot < NUMBER_OR_SLOTS; slot++ ) {
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	c4 30       	cpi	r28, 0x04	; 4
     686:	d1 05       	cpc	r29, r1
     688:	81 f7       	brne	.-32     	; 0x66a <_Z14processCommandv+0x4e>
     68a:	1f c0       	rjmp	.+62     	; 0x6ca <_Z14processCommandv+0xae>
      if (signalShutdown == 1) {
        signalShutdownOnSlot(slot);
      }
    }
  }
  else if (cmd == 'W') { // Write EEPROM.
     68c:	87 35       	cpi	r24, 0x57	; 87
     68e:	91 05       	cpc	r25, r1
     690:	91 f4       	brne	.+36     	; 0x6b6 <_Z14processCommandv+0x9a>
    unsigned int address = databuf[2];
     692:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <databuf+0x2>
    unsigned int data = databuf[3];
     696:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <databuf+0x3>
    //Serial.print("CSPB write byte address: '%d'\n", address);
    //Serial.print("CSPB write byte data: '%d'\n", data);
	if (address == EEPROM_I2C_ADDR) {
     69a:	81 11       	cpse	r24, r1
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <_Z14processCommandv+0x8c>
		if (data < 8) {
     69e:	68 30       	cpi	r22, 0x08	; 8
     6a0:	a0 f0       	brcs	.+40     	; 0x6ca <_Z14processCommandv+0xae>
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <_Z14processCommandv+0x8e>
     6a8:	90 e0       	ldi	r25, 0x00	; 0
	}
  }
  else if (cmd == 'R') { // Set the register read address for next register data request.
	  register_address = databuf[2];
  }
} // end processCommand
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <eeprom_write_byte>
	}
	else {
		EEPROM.write(address, data);
	}
  }
  else if (cmd == 'R') { // Set the register read address for next register data request.
     6b6:	82 35       	cpi	r24, 0x52	; 82
     6b8:	91 05       	cpc	r25, r1
     6ba:	39 f4       	brne	.+14     	; 0x6ca <_Z14processCommandv+0xae>
	  register_address = databuf[2];
     6bc:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <databuf+0x2>
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <register_address+0x1>
     6c6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <register_address>
  }
} // end processCommand
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <loop>:

/**
  / Main program loop
**/
void loop()
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
	const long interval = 20;  // interval at which to blink (milliseconds)

	if (received) {
     6d8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <received>
     6dc:	88 23       	and	r24, r24
     6de:	91 f0       	breq	.+36     	; 0x704 <loop+0x30>
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	87 e1       	ldi	r24, 0x17	; 23
     6e4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
{
	const long interval = 20;  // interval at which to blink (milliseconds)

	if (received) {
		setPinState(TX_RX_LED, HIGH);
		previousMillis = millis();
     6e8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <millis>
     6ec:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <__data_end>
     6f0:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <__data_end+0x1>
     6f4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end+0x2>
     6f8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x3>
		processCommand();
     6fc:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z14processCommandv>
		received = 0;
     700:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <received>
	}

	if (millis() - previousMillis >= interval) {
     704:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <millis>
     708:	00 91 98 01 	lds	r16, 0x0198	; 0x800198 <__data_end>
     70c:	10 91 99 01 	lds	r17, 0x0199	; 0x800199 <__data_end+0x1>
     710:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end+0x2>
     714:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	80 1b       	sub	r24, r16
     71e:	91 0b       	sbc	r25, r17
     720:	a2 0b       	sbc	r26, r18
     722:	b3 0b       	sbc	r27, r19
     724:	44 97       	sbiw	r24, 0x14	; 20
     726:	a1 05       	cpc	r26, r1
     728:	b1 05       	cpc	r27, r1
     72a:	30 f0       	brcs	.+12     	; 0x738 <loop+0x64>
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	87 e1       	ldi	r24, 0x17	; 23

	if (millis() - previousMillis >= interval) {
		setPinState(TX_RX_LED, LOW);
	}

}
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     734:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <digitalWrite>

	if (millis() - previousMillis >= interval) {
		setPinState(TX_RX_LED, LOW);
	}

}
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <_Z12receiveEventi>:

/**
  / handle Rx Event (incoming I2C data)
**/
void receiveEvent(int count)
{
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	c4 56       	subi	r28, 0x64	; 100
     758:	d1 09       	sbc	r29, r1
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	7c 01       	movw	r14, r24
  int idx = 0;
  memset(databuf, 0, sizeof(databuf)); // clears current buffer.
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	e0 ea       	ldi	r30, 0xA0	; 160
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	df 01       	movw	r26, r30
     770:	9c 01       	movw	r18, r24
     772:	1d 92       	st	X+, r1
     774:	21 50       	subi	r18, 0x01	; 1
     776:	30 40       	sbci	r19, 0x00	; 0
     778:	e1 f7       	brne	.-8      	; 0x772 <_Z12receiveEventi+0x34>
/**
  / handle Rx Event (incoming I2C data)
**/
void receiveEvent(int count)
{
  int idx = 0;
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	10 e0       	ldi	r17, 0x00	; 0
    if (idx < MEM_LEN) {            // drop data beyond memory boundary
      databuf[idx] = Wire.read();   // copy data to memory
      
      char str_buffer [100]; // Typical formated message is 56 characters long.
      int number_of_chars;
      number_of_chars = sprintf(str_buffer, "CSPB received byte--> Char: '%s'  \t Hex: %#x \t Dec: %d \n", &databuf[idx], databuf[idx], databuf[idx]);
     77e:	83 e1       	ldi	r24, 0x13	; 19
     780:	c8 2e       	mov	r12, r24
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	d8 2e       	mov	r13, r24
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	5c 01       	movw	r10, r24
**/
void receiveEvent(int count)
{
  int idx = 0;
  memset(databuf, 0, sizeof(databuf)); // clears current buffer.
  while (idx < count) {
     78c:	0e 15       	cp	r16, r14
     78e:	1f 05       	cpc	r17, r15
     790:	4c f5       	brge	.+82     	; 0x7e4 <_Z12receiveEventi+0xa6>
    if (idx < MEM_LEN) {            // drop data beyond memory boundary
      databuf[idx] = Wire.read();   // copy data to memory
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	93 e0       	ldi	r25, 0x03	; 3
void receiveEvent(int count)
{
  int idx = 0;
  memset(databuf, 0, sizeof(databuf)); // clears current buffer.
  while (idx < count) {
    if (idx < MEM_LEN) {            // drop data beyond memory boundary
     796:	0f 3f       	cpi	r16, 0xFF	; 255
     798:	11 05       	cpc	r17, r1
     79a:	09 f0       	breq	.+2      	; 0x79e <_Z12receiveEventi+0x60>
     79c:	04 f5       	brge	.+64     	; 0x7de <_Z12receiveEventi+0xa0>
      databuf[idx] = Wire.read();   // copy data to memory
     79e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN7TwoWire4readEv>
     7a2:	f8 01       	movw	r30, r16
     7a4:	e0 56       	subi	r30, 0x60	; 96
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	80 83       	st	Z, r24
     7aa:	99 27       	eor	r25, r25
      
      char str_buffer [100]; // Typical formated message is 56 characters long.
      int number_of_chars;
      number_of_chars = sprintf(str_buffer, "CSPB received byte--> Char: '%s'  \t Hex: %#x \t Dec: %d \n", &databuf[idx], databuf[idx], databuf[idx]);
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	ff 93       	push	r31
     7b6:	ef 93       	push	r30
     7b8:	df 92       	push	r13
     7ba:	cf 92       	push	r12
     7bc:	bf 92       	push	r11
     7be:	af 92       	push	r10
     7c0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <sprintf>
      //Serial.println(number_of_chars);
      Serial.print(str_buffer);
     7c4:	b5 01       	movw	r22, r10
     7c6:	80 ea       	ldi	r24, 0xA0	; 160
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 8b 05 	call	0xb16	; 0xb16 <_ZN5Print5printEPKc>
      idx++;
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	d7 cf       	rjmp	.-82     	; 0x78c <_Z12receiveEventi+0x4e>
    }
    else
      Wire.read();                  // drop data if memory full
     7de:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN7TwoWire4readEv>
     7e2:	d4 cf       	rjmp	.-88     	; 0x78c <_Z12receiveEventi+0x4e>
  }
  //Serial.print("CSPB received count: %d\n", count);
  received = count; // set received flag to count, this triggers print in main loop
     7e4:	e0 92 9f 01 	sts	0x019F, r14	; 0x80019f <received>
}
     7e8:	cc 59       	subi	r28, 0x9C	; 156
     7ea:	df 4f       	sbci	r29, 0xFF	; 255
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	bf 90       	pop	r11
     808:	af 90       	pop	r10
     80a:	08 95       	ret

0000080c <_Z12requestEventv>:
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	87 e1       	ldi	r24, 0x17	; 23
     810:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
   for other data return functions.
**/
void requestEvent(void)
{
	setPinState(TX_RX_LED, HIGH);
	if (register_address < EEPROM_SIZE)
     814:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <register_address>
     818:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <register_address+0x1>
     81c:	80 38       	cpi	r24, 0x80	; 128
     81e:	91 05       	cpc	r25, r1
     820:	44 f4       	brge	.+16     	; 0x832 <_Z12requestEventv+0x26>
		Wire.write(EEPROM.read(register_address));
     822:	0e 94 11 01 	call	0x222	; 0x222 <_ZN11EEPROMClass4readEi.isra.0>
     826:	68 2f       	mov	r22, r24
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire5writeEh>
     830:	1c c0       	rjmp	.+56     	; 0x86a <_Z12requestEventv+0x5e>
	else if (register_address == 128)
     832:	80 38       	cpi	r24, 0x80	; 128
     834:	91 05       	cpc	r25, r1
     836:	19 f4       	brne	.+6      	; 0x83e <_Z12requestEventv+0x32>
		Wire.write(get_port_state(MONITOR_PIN));
     838:	8c e4       	ldi	r24, 0x4C	; 76
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	05 c0       	rjmp	.+10     	; 0x848 <_Z12requestEventv+0x3c>
	else if (register_address == 129)
     83e:	81 38       	cpi	r24, 0x81	; 129
     840:	91 05       	cpc	r25, r1
     842:	31 f4       	brne	.+12     	; 0x850 <_Z12requestEventv+0x44>
		Wire.write(get_port_state(POWER_PIN));
     844:	8c e5       	ldi	r24, 0x5C	; 92
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_Z14get_port_statePKi>
     84c:	bc 01       	movw	r22, r24
     84e:	09 c0       	rjmp	.+18     	; 0x862 <_Z12requestEventv+0x56>
	else if (register_address == 130)
     850:	82 38       	cpi	r24, 0x82	; 130
     852:	91 05       	cpc	r25, r1
     854:	21 f4       	brne	.+8      	; 0x85e <_Z12requestEventv+0x52>
		Wire.write(is_in_shutdown);
     856:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <is_in_shutdown>
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_Z12requestEventv+0x56>
	else
		Wire.write(0);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	84 e0       	ldi	r24, 0x04	; 4
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	0e 94 13 01 	call	0x226	; 0x226 <_ZN7TwoWire5writeEi>
	delay(50);
     86a:	62 e3       	ldi	r22, 0x32	; 50
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>
/
/ Sets the specified pin the the given state.
**/
void setPinState(int pinNumber, int state){
	if (pinNumber != 99) // This is a kludge to access the HBW pin on the ATMEGA32U4 which is not defined in the arduino pins file.
		digitalWrite(pinNumber, state);
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	87 e1       	ldi	r24, 0x17	; 23
     87a:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <digitalWrite>

0000087e <_ZN5Print17availableForWriteEv>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret

00000884 <_ZN7Serial_5writeEh>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	69 83       	std	Y+1, r22	; 0x01
     890:	dc 01       	movw	r26, r24
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	02 80       	ldd	r0, Z+2	; 0x02
     898:	f3 81       	ldd	r31, Z+3	; 0x03
     89a:	e0 2d       	mov	r30, r0
     89c:	41 e0       	ldi	r20, 0x01	; 1
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	09 95       	icall
     8a8:	0f 90       	pop	r0
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <_ZN7Serial_4peekEv>:
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ba:	97 ff       	sbrs	r25, 7
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <_ZN7Serial_4peekEv+0x18>
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	0e 94 5f 07 	call	0xebe	; 0xebe <_Z8USB_Recvh>
     8c4:	9d 87       	std	Y+13, r25	; 0x0d
     8c6:	8c 87       	std	Y+12, r24	; 0x0c
     8c8:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ca:	9d 85       	ldd	r25, Y+13	; 0x0d
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <_ZN7Serial_17availableForWriteEv>:
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	0e 94 76 07 	call	0xeec	; 0xeec <_Z13USB_SendSpaceh>
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	08 95       	ret

000008dc <_ZN7Serial_5flushEv>:
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <_Z9USB_Flushh>

000008e2 <_ZN7Serial_9availableEv>:
     8e2:	fc 01       	movw	r30, r24
     8e4:	84 85       	ldd	r24, Z+12	; 0x0c
     8e6:	95 85       	ldd	r25, Z+13	; 0x0d
     8e8:	97 fd       	sbrc	r25, 7
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <_ZN7Serial_9availableEv+0x16>
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 0b 07 	call	0xe16	; 0xe16 <_Z13USB_Availableh>
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	08 95       	ret
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 0b 07 	call	0xe16	; 0xe16 <_Z13USB_Availableh>
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 95       	ret

00000902 <_ZN7Serial_4readEv>:
     902:	fc 01       	movw	r30, r24
     904:	84 85       	ldd	r24, Z+12	; 0x0c
     906:	95 85       	ldd	r25, Z+13	; 0x0d
     908:	97 fd       	sbrc	r25, 7
     90a:	05 c0       	rjmp	.+10     	; 0x916 <_ZN7Serial_4readEv+0x14>
     90c:	2f ef       	ldi	r18, 0xFF	; 255
     90e:	3f ef       	ldi	r19, 0xFF	; 255
     910:	35 87       	std	Z+13, r19	; 0x0d
     912:	24 87       	std	Z+12, r18	; 0x0c
     914:	08 95       	ret
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_Z8USB_Recvh>

0000091c <_ZN7Serial_5writeEPKhj>:
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo+0x7>
     926:	88 23       	and	r24, r24
     928:	31 f0       	breq	.+12     	; 0x936 <_ZN7Serial_5writeEPKhj+0x1a>
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0e 94 90 07 	call	0xf20	; 0xf20 <_Z8USB_SendhPKvi>
     930:	18 16       	cp	r1, r24
     932:	19 06       	cpc	r1, r25
     934:	34 f0       	brlt	.+12     	; 0x942 <_ZN7Serial_5writeEPKhj+0x26>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9b 83       	std	Y+3, r25	; 0x03
     93c:	8a 83       	std	Y+2, r24	; 0x02
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <_Z16isLUFAbootloaderv>:
     948:	ee ef       	ldi	r30, 0xFE	; 254
     94a:	ff e7       	ldi	r31, 0x7F	; 127
     94c:	25 91       	lpm	r18, Z+
     94e:	34 91       	lpm	r19, Z
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	2b 3f       	cpi	r18, 0xFB	; 251
     954:	3c 4d       	sbci	r19, 0xDC	; 220
     956:	09 f0       	breq	.+2      	; 0x95a <_Z16isLUFAbootloaderv+0x12>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret

0000095c <_Z16CDC_GetInterfacePh>:
     95c:	fc 01       	movw	r30, r24
     95e:	90 81       	ld	r25, Z
     960:	9e 5f       	subi	r25, 0xFE	; 254
     962:	90 83       	st	Z, r25
     964:	42 e4       	ldi	r20, 0x42	; 66
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	6a ec       	ldi	r22, 0xCA	; 202
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	0c 94 3f 08 	jmp	0x107e	; 0x107e <_Z15USB_SendControlhPKvi>

00000972 <_Z9CDC_SetupR8USBSetup>:
     972:	fc 01       	movw	r30, r24
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	90 81       	ld	r25, Z
     978:	91 3a       	cpi	r25, 0xA1	; 161
     97a:	59 f4       	brne	.+22     	; 0x992 <_Z9CDC_SetupR8USBSetup+0x20>
     97c:	81 32       	cpi	r24, 0x21	; 33
     97e:	09 f0       	breq	.+2      	; 0x982 <_Z9CDC_SetupR8USBSetup+0x10>
     980:	65 c0       	rjmp	.+202    	; 0xa4c <__DATA_REGION_LENGTH__+0x4c>
     982:	47 e0       	ldi	r20, 0x07	; 7
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	64 e0       	ldi	r22, 0x04	; 4
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z15USB_SendControlhPKvi>
     990:	5b c0       	rjmp	.+182    	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     992:	91 32       	cpi	r25, 0x21	; 33
     994:	09 f0       	breq	.+2      	; 0x998 <_Z9CDC_SetupR8USBSetup+0x26>
     996:	5a c0       	rjmp	.+180    	; 0xa4c <__DATA_REGION_LENGTH__+0x4c>
     998:	83 32       	cpi	r24, 0x23	; 35
     99a:	69 f4       	brne	.+26     	; 0x9b6 <_Z9CDC_SetupR8USBSetup+0x44>
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	93 81       	ldd	r25, Z+3	; 0x03
     9a0:	a0 e0       	ldi	r26, 0x00	; 0
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     9a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     9b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     9b4:	49 c0       	rjmp	.+146    	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     9b6:	80 32       	cpi	r24, 0x20	; 32
     9b8:	39 f4       	brne	.+14     	; 0x9c8 <_Z9CDC_SetupR8USBSetup+0x56>
     9ba:	67 e0       	ldi	r22, 0x07	; 7
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 66 08 	call	0x10cc	; 0x10cc <_Z15USB_RecvControlPvi>
     9c6:	40 c0       	rjmp	.+128    	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     9c8:	82 32       	cpi	r24, 0x22	; 34
     9ca:	09 f0       	breq	.+2      	; 0x9ce <_Z9CDC_SetupR8USBSetup+0x5c>
     9cc:	3d c0       	rjmp	.+122    	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     9ce:	82 81       	ldd	r24, Z+2	; 0x02
     9d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZL12_usbLineInfo+0x7>
     9d4:	0e 94 a4 04 	call	0x948	; 0x948 <_Z16isLUFAbootloaderv>
     9d8:	88 23       	and	r24, r24
     9da:	19 f0       	breq	.+6      	; 0x9e2 <_Z9CDC_SetupR8USBSetup+0x70>
     9dc:	ee ef       	ldi	r30, 0xFE	; 254
     9de:	fa e0       	ldi	r31, 0x0A	; 10
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <_Z9CDC_SetupR8USBSetup+0x74>
     9e2:	e0 e0       	ldi	r30, 0x00	; 0
     9e4:	f8 e0       	ldi	r31, 0x08	; 8
     9e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZL12_usbLineInfo>
     9ea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_ZL12_usbLineInfo+0x1>
     9ee:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_ZL12_usbLineInfo+0x2>
     9f2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_ZL12_usbLineInfo+0x3>
     9f6:	80 3b       	cpi	r24, 0xB0	; 176
     9f8:	94 40       	sbci	r25, 0x04	; 4
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	41 f5       	brne	.+80     	; 0xa50 <__DATA_REGION_LENGTH__+0x50>
     a00:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo+0x7>
     a04:	80 fd       	sbrc	r24, 0
     a06:	24 c0       	rjmp	.+72     	; 0xa50 <__DATA_REGION_LENGTH__+0x50>
     a08:	ee 3f       	cpi	r30, 0xFE	; 254
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	f8 07       	cpc	r31, r24
     a0e:	51 f0       	breq	.+20     	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
     a10:	80 81       	ld	r24, Z
     a12:	91 81       	ldd	r25, Z+1	; 0x01
     a14:	87 37       	cpi	r24, 0x77	; 119
     a16:	27 e7       	ldi	r18, 0x77	; 119
     a18:	92 07       	cpc	r25, r18
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
     a1c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x72c>
     a20:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x72b>
     a24:	87 e7       	ldi	r24, 0x77	; 119
     a26:	97 e7       	ldi	r25, 0x77	; 119
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a30:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_ZL11wdtcsr_save>
     a34:	9b e0       	ldi	r25, 0x0B	; 11
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	a8 95       	wdr
     a3e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 95       	ret
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	08 95       	ret
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	87 37       	cpi	r24, 0x77	; 119
     a56:	97 47       	sbci	r25, 0x77	; 119
     a58:	b9 f7       	brne	.-18     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     a5a:	a8 95       	wdr
     a5c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a60:	88 61       	ori	r24, 0x18	; 24
     a62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a66:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_ZL11wdtcsr_save>
     a6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a6e:	ee 3f       	cpi	r30, 0xFE	; 254
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	f8 07       	cpc	r31, r24
     a74:	39 f0       	breq	.+14     	; 0xa84 <__DATA_REGION_LENGTH__+0x84>
     a76:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x72b>
     a7a:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x72c>
     a7e:	91 83       	std	Z+1, r25	; 0x01
     a80:	80 83       	st	Z, r24
     a82:	e2 cf       	rjmp	.-60     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
     a84:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x72c>
     a88:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x72b>
     a8c:	dd cf       	rjmp	.-70     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>

00000a8e <_ZN7Serial_5beginEm>:
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	3f ef       	ldi	r19, 0xFF	; 255
     a92:	fc 01       	movw	r30, r24
     a94:	35 87       	std	Z+13, r19	; 0x0d
     a96:	24 87       	std	Z+12, r18	; 0x0c
     a98:	08 95       	ret

00000a9a <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a9a:	e0 ea       	ldi	r30, 0xA0	; 160
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	13 82       	std	Z+3, r1	; 0x03
     aa0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     aa2:	88 ee       	ldi	r24, 0xE8	; 232
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	84 83       	std	Z+4, r24	; 0x04
     aac:	95 83       	std	Z+5, r25	; 0x05
     aae:	a6 83       	std	Z+6, r26	; 0x06
     ab0:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
     ab2:	88 e6       	ldi	r24, 0x68	; 104
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	91 83       	std	Z+1, r25	; 0x01
     ab8:	80 83       	st	Z, r24
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	9f ef       	ldi	r25, 0xFF	; 255
     abe:	95 87       	std	Z+13, r25	; 0x0d
     ac0:	84 87       	std	Z+12, r24	; 0x0c
     ac2:	08 95       	ret

00000ac4 <initVariant>:
     ac4:	08 95       	ret

00000ac6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     ac6:	0e 94 3d 0b 	call	0x167a	; 0x167a <init>

	initVariant();
     aca:	0e 94 62 05 	call	0xac4	; 0xac4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     ace:	81 ef       	ldi	r24, 0xF1	; 241
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     ad6:	0e 94 a8 01 	call	0x350	; 0x350 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ada:	c0 e0       	ldi	r28, 0x00	; 0
     adc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     ade:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <loop>
		if (serialEventRun) serialEventRun();
     ae2:	20 97       	sbiw	r28, 0x00	; 0
     ae4:	e1 f3       	breq	.-8      	; 0xade <main+0x18>
     ae6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     aea:	f9 cf       	rjmp	.-14     	; 0xade <main+0x18>

00000aec <_ZN5Print5writeEPKc>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     aec:	61 15       	cp	r22, r1
     aee:	71 05       	cpc	r23, r1
     af0:	79 f0       	breq	.+30     	; 0xb10 <__stack+0x11>
     af2:	fb 01       	movw	r30, r22
     af4:	01 90       	ld	r0, Z+
     af6:	00 20       	and	r0, r0
     af8:	e9 f7       	brne	.-6      	; 0xaf4 <_ZN5Print5writeEPKc+0x8>
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	af 01       	movw	r20, r30
     afe:	46 1b       	sub	r20, r22
     b00:	57 0b       	sbc	r21, r23
     b02:	dc 01       	movw	r26, r24
     b04:	ed 91       	ld	r30, X+
     b06:	fc 91       	ld	r31, X
     b08:	02 80       	ldd	r0, Z+2	; 0x02
     b0a:	f3 81       	ldd	r31, Z+3	; 0x03
     b0c:	e0 2d       	mov	r30, r0
     b0e:	09 94       	ijmp
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	08 95       	ret

00000b16 <_ZN5Print5printEPKc>:
     b16:	0c 94 76 05 	jmp	0xaec	; 0xaec <_ZN5Print5writeEPKc>

00000b1a <_ZN5Print5printEc>:
     b1a:	dc 01       	movw	r26, r24
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	01 90       	ld	r0, Z+
     b22:	f0 81       	ld	r31, Z
     b24:	e0 2d       	mov	r30, r0
     b26:	09 94       	ijmp

00000b28 <_ZN5Print7printlnEv>:
     b28:	66 e7       	ldi	r22, 0x76	; 118
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	0c 94 76 05 	jmp	0xaec	; 0xaec <_ZN5Print5writeEPKc>

00000b30 <_ZN5Print11printNumberEmh>:
     b30:	8f 92       	push	r8
     b32:	9f 92       	push	r9
     b34:	af 92       	push	r10
     b36:	bf 92       	push	r11
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	a1 97       	sbiw	r28, 0x21	; 33
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	7c 01       	movw	r14, r24
     b56:	fa 01       	movw	r30, r20
     b58:	cb 01       	movw	r24, r22
     b5a:	19 a2       	std	Y+33, r1	; 0x21
     b5c:	22 30       	cpi	r18, 0x02	; 2
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <_ZN5Print11printNumberEmh+0x32>
     b60:	2a e0       	ldi	r18, 0x0A	; 10
     b62:	8e 01       	movw	r16, r28
     b64:	0f 5d       	subi	r16, 0xDF	; 223
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	82 2e       	mov	r8, r18
     b6a:	91 2c       	mov	r9, r1
     b6c:	a1 2c       	mov	r10, r1
     b6e:	b1 2c       	mov	r11, r1
     b70:	bf 01       	movw	r22, r30
     b72:	a5 01       	movw	r20, r10
     b74:	94 01       	movw	r18, r8
     b76:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__udivmodsi4>
     b7a:	f9 01       	movw	r30, r18
     b7c:	ca 01       	movw	r24, r20
     b7e:	01 50       	subi	r16, 0x01	; 1
     b80:	11 09       	sbc	r17, r1
     b82:	6a 30       	cpi	r22, 0x0A	; 10
     b84:	10 f4       	brcc	.+4      	; 0xb8a <_ZN5Print11printNumberEmh+0x5a>
     b86:	60 5d       	subi	r22, 0xD0	; 208
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <_ZN5Print11printNumberEmh+0x5c>
     b8a:	69 5c       	subi	r22, 0xC9	; 201
     b8c:	d8 01       	movw	r26, r16
     b8e:	6c 93       	st	X, r22
     b90:	23 2b       	or	r18, r19
     b92:	24 2b       	or	r18, r20
     b94:	25 2b       	or	r18, r21
     b96:	61 f7       	brne	.-40     	; 0xb70 <_ZN5Print11printNumberEmh+0x40>
     b98:	b8 01       	movw	r22, r16
     b9a:	c7 01       	movw	r24, r14
     b9c:	0e 94 76 05 	call	0xaec	; 0xaec <_ZN5Print5writeEPKc>
     ba0:	a1 96       	adiw	r28, 0x21	; 33
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	08 95       	ret

00000bc2 <_ZN5Print5printEmi>:
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	41 f4       	brne	.+16     	; 0xbd8 <_ZN5Print5printEmi+0x16>
     bc8:	dc 01       	movw	r26, r24
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	01 90       	ld	r0, Z+
     bd0:	f0 81       	ld	r31, Z
     bd2:	e0 2d       	mov	r30, r0
     bd4:	64 2f       	mov	r22, r20
     bd6:	09 94       	ijmp
     bd8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_ZN5Print11printNumberEmh>

00000bdc <_ZN5Print5printEji>:
     bdc:	9a 01       	movw	r18, r20
     bde:	ab 01       	movw	r20, r22
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <_ZN5Print5printEmi>

00000be8 <_ZN5Print7printlnEji>:
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
     bf2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_ZN5Print5printEji>
     bf6:	8c 01       	movw	r16, r24
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN5Print7printlnEv>
     bfe:	80 0f       	add	r24, r16
     c00:	91 1f       	adc	r25, r17
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
  if (base == 0) {
     c1c:	21 15       	cp	r18, r1
     c1e:	31 05       	cpc	r19, r1
     c20:	81 f4       	brne	.+32     	; 0xc42 <_ZN5Print5printEli+0x36>
    return write(n);
     c22:	dc 01       	movw	r26, r24
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	01 90       	ld	r0, Z+
     c2a:	f0 81       	ld	r31, Z
     c2c:	e0 2d       	mov	r30, r0
     c2e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     c40:	09 94       	ijmp
  } else if (base == 10) {
     c42:	2a 30       	cpi	r18, 0x0A	; 10
     c44:	31 05       	cpc	r19, r1
     c46:	01 f5       	brne	.+64     	; 0xc88 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     c48:	77 ff       	sbrs	r23, 7
     c4a:	1d c0       	rjmp	.+58     	; 0xc86 <_ZN5Print5printEli+0x7a>
     c4c:	6a 01       	movw	r12, r20
     c4e:	7b 01       	movw	r14, r22
     c50:	ec 01       	movw	r28, r24
      int t = print('-');
     c52:	6d e2       	ldi	r22, 0x2D	; 45
     c54:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN5Print5printEc>
     c58:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     c5a:	44 27       	eor	r20, r20
     c5c:	55 27       	eor	r21, r21
     c5e:	ba 01       	movw	r22, r20
     c60:	4c 19       	sub	r20, r12
     c62:	5d 09       	sbc	r21, r13
     c64:	6e 09       	sbc	r22, r14
     c66:	7f 09       	sbc	r23, r15
     c68:	2a e0       	ldi	r18, 0x0A	; 10
     c6a:	ce 01       	movw	r24, r28
     c6c:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN5Print11printNumberEmh>
     c70:	80 0f       	add	r24, r16
     c72:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     c86:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	df 90       	pop	r13
     c96:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c98:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_ZN5Print11printNumberEmh>

00000c9c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     c9c:	9a 01       	movw	r18, r20
  return print((long) n, base);
     c9e:	ab 01       	movw	r20, r22
     ca0:	77 0f       	add	r23, r23
     ca2:	66 0b       	sbc	r22, r22
     ca4:	77 0b       	sbc	r23, r23
     ca6:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_ZN5Print5printEli>

00000caa <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     cb4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_ZN5Print5printEii>
     cb8:	8c 01       	movw	r16, r24
  n += println();
     cba:	ce 01       	movw	r24, r28
     cbc:	0e 94 94 05 	call	0xb28	; 0xb28 <_ZN5Print7printlnEv>
  return n;
}
     cc0:	80 0f       	add	r24, r16
     cc2:	91 1f       	adc	r25, r17
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <_ZL11SendControlh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     cce:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <_ZL6_cmark>
     cd2:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <_ZL6_cmark+0x1>
     cd6:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <_ZL5_cend>
     cda:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <_ZL5_cend+0x1>
     cde:	42 17       	cp	r20, r18
     ce0:	53 07       	cpc	r21, r19
     ce2:	b4 f4       	brge	.+44     	; 0xd10 <_ZL11SendControlh+0x42>
     ce4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ce8:	95 70       	andi	r25, 0x05	; 5
     cea:	e1 f3       	breq	.-8      	; 0xce4 <_ZL11SendControlh+0x16>
     cec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     cf0:	92 fd       	sbrc	r25, 2
     cf2:	19 c0       	rjmp	.+50     	; 0xd26 <_ZL11SendControlh+0x58>
     cf4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     cf8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZL6_cmark>
     cfc:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_ZL6_cmark+0x1>
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	8f 73       	andi	r24, 0x3F	; 63
     d04:	99 27       	eor	r25, r25
     d06:	89 2b       	or	r24, r25
     d08:	19 f4       	brne	.+6      	; 0xd10 <_ZL11SendControlh+0x42>
     d0a:	8e ef       	ldi	r24, 0xFE	; 254
     d0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     d10:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <_ZL6_cmark>
     d14:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <_ZL6_cmark+0x1>
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <_ZL6_cmark+0x1>
     d1e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <_ZL6_cmark>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	08 95       	ret
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	08 95       	ret

00000d2a <_ZL24USB_SendStringDescriptorPKhhh>:
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	d8 2e       	mov	r13, r24
     d3a:	f9 2e       	mov	r15, r25
     d3c:	e4 2e       	mov	r14, r20
     d3e:	06 2f       	mov	r16, r22
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	c8 01       	movw	r24, r16
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	88 0f       	add	r24, r24
     d48:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL11SendControlh>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL11SendControlh>
     d52:	cd 2d       	mov	r28, r13
     d54:	df 2d       	mov	r29, r15
     d56:	0c 0f       	add	r16, r28
     d58:	1d 1f       	adc	r17, r29
     d5a:	c0 17       	cp	r28, r16
     d5c:	d1 07       	cpc	r29, r17
     d5e:	89 f0       	breq	.+34     	; 0xd82 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     d60:	e7 fe       	sbrs	r14, 7
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     d64:	fe 01       	movw	r30, r28
     d66:	84 91       	lpm	r24, Z
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     d6a:	88 81       	ld	r24, Y
     d6c:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL11SendControlh>
     d70:	f8 2e       	mov	r15, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL11SendControlh>
     d78:	8f 21       	and	r24, r15
     d7a:	21 96       	adiw	r28, 0x01	; 1
     d7c:	81 11       	cpse	r24, r1
     d7e:	ed cf       	rjmp	.-38     	; 0xd5a <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	08 95       	ret

00000d94 <_ZL15USB_ClockEnablev>:
     d94:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     d9e:	80 ea       	ldi	r24, 0xA0	; 160
     da0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     da4:	89 b5       	in	r24, 0x29	; 41
     da6:	8f 7e       	andi	r24, 0xEF	; 239
     da8:	89 bd       	out	0x29, r24	; 41
     daa:	89 b5       	in	r24, 0x29	; 41
     dac:	82 60       	ori	r24, 0x02	; 2
     dae:	89 bd       	out	0x29, r24	; 41
     db0:	09 b4       	in	r0, 0x29	; 41
     db2:	00 fe       	sbrs	r0, 0
     db4:	fd cf       	rjmp	.-6      	; 0xdb0 <_ZL15USB_ClockEnablev+0x1c>
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>
     dc2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     dc6:	8f 7c       	andi	r24, 0xCF	; 207
     dc8:	80 61       	ori	r24, 0x10	; 16
     dca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     dce:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     dd2:	80 7f       	andi	r24, 0xF0	; 240
     dd4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     dd8:	08 95       	ret

00000dda <_ZL14SendInterfacesv>:
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	1f 92       	push	r1
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	19 82       	std	Y+1, r1	; 0x01
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 ae 04 	call	0x95c	; 0x95c <_Z16CDC_GetInterfacePh>
     dee:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_Z12PluggableUSBv>
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_ZN13PluggableUSB_12getInterfaceEPh>
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <_ZN6LockEPC1Eh>:
     e06:	2f b7       	in	r18, 0x3f	; 63
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
     e0c:	f8 94       	cli
     e0e:	67 70       	andi	r22, 0x07	; 7
     e10:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     e14:	08 95       	ret

00000e16 <_Z13USB_Availableh>:
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	68 2f       	mov	r22, r24
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6LockEPC1Eh>
     e2a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	9f bf       	out	0x3f, r25	; 63
     e32:	0f 90       	pop	r0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <_Z8USB_RecvhPvi>:
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <_usbConfiguration>
     e50:	99 23       	and	r25, r25
     e52:	11 f0       	breq	.+4      	; 0xe58 <_Z8USB_RecvhPvi+0x1e>
     e54:	57 ff       	sbrs	r21, 7
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <_Z8USB_RecvhPvi+0x24>
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	28 c0       	rjmp	.+80     	; 0xeae <_Z8USB_RecvhPvi+0x74>
     e5e:	8a 01       	movw	r16, r20
     e60:	7b 01       	movw	r14, r22
     e62:	68 2f       	mov	r22, r24
     e64:	ce 01       	movw	r24, r28
     e66:	01 96       	adiw	r24, 0x01	; 1
     e68:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6LockEPC1Eh>
     e6c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	02 17       	cp	r16, r18
     e74:	13 07       	cpc	r17, r19
     e76:	0c f4       	brge	.+2      	; 0xe7a <_Z8USB_RecvhPvi+0x40>
     e78:	98 01       	movw	r18, r16
     e7a:	82 2f       	mov	r24, r18
     e7c:	f7 01       	movw	r30, r14
     e7e:	94 e6       	ldi	r25, 0x64	; 100
     e80:	81 50       	subi	r24, 0x01	; 1
     e82:	30 f0       	brcs	.+12     	; 0xe90 <_Z8USB_RecvhPvi+0x56>
     e84:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <RxLEDPulse>
     e88:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     e8c:	41 93       	st	Z+, r20
     e8e:	f8 cf       	rjmp	.-16     	; 0xe80 <_Z8USB_RecvhPvi+0x46>
     e90:	21 15       	cp	r18, r1
     e92:	31 05       	cpc	r19, r1
     e94:	21 f0       	breq	.+8      	; 0xe9e <_Z8USB_RecvhPvi+0x64>
     e96:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e9a:	88 23       	and	r24, r24
     e9c:	21 f0       	breq	.+8      	; 0xea6 <_Z8USB_RecvhPvi+0x6c>
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	8f bf       	out	0x3f, r24	; 63
     ea2:	c9 01       	movw	r24, r18
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <_Z8USB_RecvhPvi+0x74>
     ea6:	8b e6       	ldi	r24, 0x6B	; 107
     ea8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <_Z8USB_RecvhPvi+0x64>
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <_Z8USB_Recvh>:
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	be 01       	movw	r22, r28
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_Z8USB_RecvhPvi>
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	19 f4       	brne	.+6      	; 0xee0 <_Z8USB_Recvh+0x22>
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <_Z8USB_Recvh+0x26>
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <_Z13USB_SendSpaceh>:
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	68 2f       	mov	r22, r24
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6LockEPC1Eh>
     f00:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f04:	89 2f       	mov	r24, r25
     f06:	80 72       	andi	r24, 0x20	; 32
     f08:	95 ff       	sbrs	r25, 5
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <_Z13USB_SendSpaceh+0x28>
     f0c:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     f10:	80 e4       	ldi	r24, 0x40	; 64
     f12:	89 1b       	sub	r24, r25
     f14:	99 81       	ldd	r25, Y+1	; 0x01
     f16:	9f bf       	out	0x3f, r25	; 63
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <_Z8USB_SendhPKvi>:
     f20:	5f 92       	push	r5
     f22:	6f 92       	push	r6
     f24:	7f 92       	push	r7
     f26:	8f 92       	push	r8
     f28:	9f 92       	push	r9
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	1f 92       	push	r1
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	98 2e       	mov	r9, r24
     f46:	6b 01       	movw	r12, r22
     f48:	b4 2e       	mov	r11, r20
     f4a:	05 2f       	mov	r16, r21
     f4c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <_usbConfiguration>
     f50:	81 11       	cpse	r24, r1
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <_Z8USB_SendhPKvi+0x3a>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	76 c0       	rjmp	.+236    	; 0x1046 <_Z8USB_SendhPKvi+0x126>
     f5a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_usbSuspendState>
     f5e:	80 ff       	sbrs	r24, 0
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <_Z8USB_SendhPKvi+0x4c>
     f62:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     f6c:	eb 2c       	mov	r14, r11
     f6e:	f0 2e       	mov	r15, r16
     f70:	a1 2c       	mov	r10, r1
     f72:	8a ef       	ldi	r24, 0xFA	; 250
     f74:	88 2e       	mov	r8, r24
     f76:	89 2d       	mov	r24, r9
     f78:	80 72       	andi	r24, 0x20	; 32
     f7a:	68 2e       	mov	r6, r24
     f7c:	89 2d       	mov	r24, r9
     f7e:	80 74       	andi	r24, 0x40	; 64
     f80:	58 2e       	mov	r5, r24
     f82:	9a e3       	ldi	r25, 0x3A	; 58
     f84:	79 2e       	mov	r7, r25
     f86:	e1 14       	cp	r14, r1
     f88:	f1 04       	cpc	r15, r1
     f8a:	19 f4       	brne	.+6      	; 0xf92 <_Z8USB_SendhPKvi+0x72>
     f8c:	aa 20       	and	r10, r10
     f8e:	09 f4       	brne	.+2      	; 0xf92 <_Z8USB_SendhPKvi+0x72>
     f90:	55 c0       	rjmp	.+170    	; 0x103c <_Z8USB_SendhPKvi+0x11c>
     f92:	89 2d       	mov	r24, r9
     f94:	0e 94 76 07 	call	0xeec	; 0xeec <_Z13USB_SendSpaceh>
     f98:	18 2f       	mov	r17, r24
     f9a:	81 11       	cpse	r24, r1
     f9c:	0a c0       	rjmp	.+20     	; 0xfb2 <_Z8USB_SendhPKvi+0x92>
     f9e:	8a 94       	dec	r8
     fa0:	88 20       	and	r8, r8
     fa2:	c1 f2       	breq	.-80     	; 0xf54 <_Z8USB_SendhPKvi+0x34>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 01 0b 	call	0x1602	; 0x1602 <delay>
     fb0:	ea cf       	rjmp	.-44     	; 0xf86 <_Z8USB_SendhPKvi+0x66>
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	e8 16       	cp	r14, r24
     fb6:	f9 06       	cpc	r15, r25
     fb8:	0c f4       	brge	.+2      	; 0xfbc <_Z8USB_SendhPKvi+0x9c>
     fba:	1e 2d       	mov	r17, r14
     fbc:	69 2d       	mov	r22, r9
     fbe:	ce 01       	movw	r24, r28
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN6LockEPC1Eh>
     fc6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     fca:	85 ff       	sbrs	r24, 5
     fcc:	34 c0       	rjmp	.+104    	; 0x1036 <_Z8USB_SendhPKvi+0x116>
     fce:	81 2f       	mov	r24, r17
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	e8 1a       	sub	r14, r24
     fd4:	f9 0a       	sbc	r15, r25
     fd6:	66 20       	and	r6, r6
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <_Z8USB_SendhPKvi+0xc4>
     fda:	11 50       	subi	r17, 0x01	; 1
     fdc:	a0 f0       	brcs	.+40     	; 0x1006 <_Z8USB_SendhPKvi+0xe6>
     fde:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     fe2:	fb cf       	rjmp	.-10     	; 0xfda <_Z8USB_SendhPKvi+0xba>
     fe4:	f6 01       	movw	r30, r12
     fe6:	97 fe       	sbrs	r9, 7
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <_Z8USB_SendhPKvi+0xde>
     fea:	11 50       	subi	r17, 0x01	; 1
     fec:	50 f0       	brcs	.+20     	; 0x1002 <_Z8USB_SendhPKvi+0xe2>
     fee:	24 91       	lpm	r18, Z
     ff0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     ff4:	31 96       	adiw	r30, 0x01	; 1
     ff6:	f9 cf       	rjmp	.-14     	; 0xfea <_Z8USB_SendhPKvi+0xca>
     ff8:	21 91       	ld	r18, Z+
     ffa:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     ffe:	11 50       	subi	r17, 0x01	; 1
    1000:	d8 f7       	brcc	.-10     	; 0xff8 <_Z8USB_SendhPKvi+0xd8>
    1002:	c8 0e       	add	r12, r24
    1004:	d9 1e       	adc	r13, r25
    1006:	aa 20       	and	r10, r10
    1008:	19 f0       	breq	.+6      	; 0x1010 <_Z8USB_SendhPKvi+0xf0>
    100a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    100e:	0b c0       	rjmp	.+22     	; 0x1026 <_Z8USB_SendhPKvi+0x106>
    1010:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1014:	85 fd       	sbrc	r24, 5
    1016:	09 c0       	rjmp	.+18     	; 0x102a <_Z8USB_SendhPKvi+0x10a>
    1018:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    101c:	aa 24       	eor	r10, r10
    101e:	a3 94       	inc	r10
    1020:	e1 14       	cp	r14, r1
    1022:	f1 04       	cpc	r15, r1
    1024:	41 f0       	breq	.+16     	; 0x1036 <_Z8USB_SendhPKvi+0x116>
    1026:	a1 2c       	mov	r10, r1
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <_Z8USB_SendhPKvi+0x116>
    102a:	e1 14       	cp	r14, r1
    102c:	f1 04       	cpc	r15, r1
    102e:	19 f4       	brne	.+6      	; 0x1036 <_Z8USB_SendhPKvi+0x116>
    1030:	51 10       	cpse	r5, r1
    1032:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	8f bf       	out	0x3f, r24	; 63
    103a:	a5 cf       	rjmp	.-182    	; 0xf86 <_Z8USB_SendhPKvi+0x66>
    103c:	84 e6       	ldi	r24, 0x64	; 100
    103e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <TxLEDPulse>
    1042:	8b 2d       	mov	r24, r11
    1044:	90 2f       	mov	r25, r16
    1046:	0f 90       	pop	r0
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	08 95       	ret

00001068 <_Z11InitControli>:
    1068:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    106c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <_ZL6_cmark+0x1>
    1070:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <_ZL6_cmark>
    1074:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <_ZL5_cend+0x1>
    1078:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_ZL5_cend>
    107c:	08 95       	ret

0000107e <_Z15USB_SendControlhPKvi>:
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	d8 2e       	mov	r13, r24
    108e:	8a 01       	movw	r16, r20
    1090:	7b 01       	movw	r14, r22
    1092:	e4 0e       	add	r14, r20
    1094:	f5 1e       	adc	r15, r21
    1096:	eb 01       	movw	r28, r22
    1098:	ce 15       	cp	r28, r14
    109a:	df 05       	cpc	r29, r15
    109c:	71 f0       	breq	.+28     	; 0x10ba <_Z15USB_SendControlhPKvi+0x3c>
    109e:	d7 fe       	sbrs	r13, 7
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <_Z15USB_SendControlhPKvi+0x2a>
    10a2:	fe 01       	movw	r30, r28
    10a4:	84 91       	lpm	r24, Z
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_Z15USB_SendControlhPKvi+0x2c>
    10a8:	88 81       	ld	r24, Y
    10aa:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL11SendControlh>
    10ae:	21 96       	adiw	r28, 0x01	; 1
    10b0:	81 11       	cpse	r24, r1
    10b2:	f2 cf       	rjmp	.-28     	; 0x1098 <_Z15USB_SendControlhPKvi+0x1a>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	9f ef       	ldi	r25, 0xFF	; 255
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <_Z15USB_SendControlhPKvi+0x3e>
    10ba:	c8 01       	movw	r24, r16
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	08 95       	ret

000010cc <_Z15USB_RecvControlPvi>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	9b 01       	movw	r18, r22
    10d4:	b4 e6       	ldi	r27, 0x64	; 100
    10d6:	ab ef       	ldi	r26, 0xFB	; 251
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	f1 f0       	breq	.+60     	; 0x111a <_Z15USB_RecvControlPvi+0x4e>
    10de:	a9 01       	movw	r20, r18
    10e0:	21 34       	cpi	r18, 0x41	; 65
    10e2:	31 05       	cpc	r19, r1
    10e4:	14 f0       	brlt	.+4      	; 0x10ea <_Z15USB_RecvControlPvi+0x1e>
    10e6:	40 e4       	ldi	r20, 0x40	; 64
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    10ee:	82 ff       	sbrs	r24, 2
    10f0:	fc cf       	rjmp	.-8      	; 0x10ea <_Z15USB_RecvControlPvi+0x1e>
    10f2:	94 2f       	mov	r25, r20
    10f4:	fb 01       	movw	r30, r22
    10f6:	e2 1b       	sub	r30, r18
    10f8:	f3 0b       	sbc	r31, r19
    10fa:	ec 0f       	add	r30, r28
    10fc:	fd 1f       	adc	r31, r29
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	28 f0       	brcs	.+10     	; 0x110c <_Z15USB_RecvControlPvi+0x40>
    1102:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1106:	80 83       	st	Z, r24
    1108:	31 96       	adiw	r30, 0x01	; 1
    110a:	f9 cf       	rjmp	.-14     	; 0x10fe <_Z15USB_RecvControlPvi+0x32>
    110c:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <RxLEDPulse>
    1110:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1114:	24 1b       	sub	r18, r20
    1116:	35 0b       	sbc	r19, r21
    1118:	df cf       	rjmp	.-66     	; 0x10d8 <_Z15USB_RecvControlPvi+0xc>
    111a:	cb 01       	movw	r24, r22
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <__vector_11>:
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	2f 93       	push	r18
    113a:	3f 93       	push	r19
    113c:	4f 93       	push	r20
    113e:	5f 93       	push	r21
    1140:	6f 93       	push	r22
    1142:	7f 93       	push	r23
    1144:	8f 93       	push	r24
    1146:	9f 93       	push	r25
    1148:	af 93       	push	r26
    114a:	bf 93       	push	r27
    114c:	ef 93       	push	r30
    114e:	ff 93       	push	r31
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	6c 97       	sbiw	r28, 0x1c	; 28
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1162:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1166:	83 ff       	sbrs	r24, 3
    1168:	1f c1       	rjmp	.+574    	; 0x13a8 <__vector_11+0x286>
    116a:	89 e0       	ldi	r24, 0x09	; 9
    116c:	fe 01       	movw	r30, r28
    116e:	75 96       	adiw	r30, 0x15	; 21
    1170:	fe 2e       	mov	r15, r30
    1172:	0f 2f       	mov	r16, r31
    1174:	81 50       	subi	r24, 0x01	; 1
    1176:	29 f0       	breq	.+10     	; 0x1182 <__vector_11+0x60>
    1178:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    117c:	90 83       	st	Z, r25
    117e:	31 96       	adiw	r30, 0x01	; 1
    1180:	f9 cf       	rjmp	.-14     	; 0x1174 <__vector_11+0x52>
    1182:	84 e6       	ldi	r24, 0x64	; 100
    1184:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <RxLEDPulse>
    1188:	82 ef       	ldi	r24, 0xF2	; 242
    118a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    118e:	8d 89       	ldd	r24, Y+21	; 0x15
    1190:	87 ff       	sbrs	r24, 7
    1192:	05 c0       	rjmp	.+10     	; 0x119e <__vector_11+0x7c>
    1194:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1198:	90 ff       	sbrs	r25, 0
    119a:	fc cf       	rjmp	.-8      	; 0x1194 <__vector_11+0x72>
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <__vector_11+0x82>
    119e:	9e ef       	ldi	r25, 0xFE	; 254
    11a0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    11a4:	98 2f       	mov	r25, r24
    11a6:	90 76       	andi	r25, 0x60	; 96
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_11+0x8a>
    11aa:	d7 c0       	rjmp	.+430    	; 0x135a <__vector_11+0x238>
    11ac:	9e 89       	ldd	r25, Y+22	; 0x16
    11ae:	4f 89       	ldd	r20, Y+23	; 0x17
    11b0:	58 8d       	ldd	r21, Y+24	; 0x18
    11b2:	2f 89       	ldd	r18, Y+23	; 0x17
    11b4:	18 8d       	ldd	r17, Y+24	; 0x18
    11b6:	91 11       	cpse	r25, r1
    11b8:	0c c0       	rjmp	.+24     	; 0x11d2 <__vector_11+0xb0>
    11ba:	80 38       	cpi	r24, 0x80	; 128
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <__vector_11+0xa6>
    11be:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_usbCurrentStatus>
    11c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <__vector_11+0xaa>
    11c8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    11cc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    11d0:	e4 c0       	rjmp	.+456    	; 0x139a <__vector_11+0x278>
    11d2:	91 30       	cpi	r25, 0x01	; 1
    11d4:	51 f4       	brne	.+20     	; 0x11ea <__vector_11+0xc8>
    11d6:	81 11       	cpse	r24, r1
    11d8:	e0 c0       	rjmp	.+448    	; 0x139a <__vector_11+0x278>
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	51 05       	cpc	r21, r1
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__vector_11+0xc0>
    11e0:	dc c0       	rjmp	.+440    	; 0x139a <__vector_11+0x278>
    11e2:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_usbCurrentStatus>
    11e6:	8d 7f       	andi	r24, 0xFD	; 253
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <__vector_11+0xde>
    11ea:	93 30       	cpi	r25, 0x03	; 3
    11ec:	61 f4       	brne	.+24     	; 0x1206 <__vector_11+0xe4>
    11ee:	81 11       	cpse	r24, r1
    11f0:	d4 c0       	rjmp	.+424    	; 0x139a <__vector_11+0x278>
    11f2:	41 30       	cpi	r20, 0x01	; 1
    11f4:	51 05       	cpc	r21, r1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <__vector_11+0xd8>
    11f8:	d0 c0       	rjmp	.+416    	; 0x139a <__vector_11+0x278>
    11fa:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <_usbCurrentStatus>
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <_usbCurrentStatus>
    1204:	ca c0       	rjmp	.+404    	; 0x139a <__vector_11+0x278>
    1206:	95 30       	cpi	r25, 0x05	; 5
    1208:	49 f4       	brne	.+18     	; 0x121c <__vector_11+0xfa>
    120a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    120e:	80 ff       	sbrs	r24, 0
    1210:	fc cf       	rjmp	.-8      	; 0x120a <__vector_11+0xe8>
    1212:	82 2f       	mov	r24, r18
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    121a:	bf c0       	rjmp	.+382    	; 0x139a <__vector_11+0x278>
    121c:	96 30       	cpi	r25, 0x06	; 6
    121e:	09 f0       	breq	.+2      	; 0x1222 <__vector_11+0x100>
    1220:	6f c0       	rjmp	.+222    	; 0x1300 <__vector_11+0x1de>
    1222:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1224:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1226:	12 30       	cpi	r17, 0x02	; 2
    1228:	69 f5       	brne	.+90     	; 0x1284 <__vector_11+0x162>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 34 08 	call	0x1068	; 0x1068 <_Z11InitControli>
    1232:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZL14SendInterfacesv>
    1236:	99 e0       	ldi	r25, 0x09	; 9
    1238:	9e 01       	movw	r18, r28
    123a:	2f 5f       	subi	r18, 0xFF	; 255
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	79 01       	movw	r14, r18
    1240:	f9 01       	movw	r30, r18
    1242:	29 2f       	mov	r18, r25
    1244:	11 92       	st	Z+, r1
    1246:	2a 95       	dec	r18
    1248:	e9 f7       	brne	.-6      	; 0x1244 <__vector_11+0x122>
    124a:	99 83       	std	Y+1, r25	; 0x01
    124c:	1a 83       	std	Y+2, r17	; 0x02
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	90 ea       	ldi	r25, 0xA0	; 160
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	9a ef       	ldi	r25, 0xFA	; 250
    1258:	99 87       	std	Y+9, r25	; 0x09
    125a:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <_ZL6_cmark>
    125e:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <_ZL6_cmark+0x1>
    1262:	27 5f       	subi	r18, 0xF7	; 247
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	2b 83       	std	Y+3, r18	; 0x03
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	c6 01       	movw	r24, r12
    126e:	0e 94 34 08 	call	0x1068	; 0x1068 <_Z11InitControli>
    1272:	49 e0       	ldi	r20, 0x09	; 9
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	b7 01       	movw	r22, r14
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z15USB_SendControlhPKvi>
    127e:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZL14SendInterfacesv>
    1282:	8b c0       	rjmp	.+278    	; 0x139a <__vector_11+0x278>
    1284:	c6 01       	movw	r24, r12
    1286:	0e 94 34 08 	call	0x1068	; 0x1068 <_Z11InitControli>
    128a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_Z12PluggableUSBv>
    128e:	6f 2d       	mov	r22, r15
    1290:	70 2f       	mov	r23, r16
    1292:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	19 f0       	breq	.+6      	; 0x12a0 <__vector_11+0x17e>
    129a:	0c f0       	brlt	.+2      	; 0x129e <__vector_11+0x17c>
    129c:	7e c0       	rjmp	.+252    	; 0x139a <__vector_11+0x278>
    129e:	81 c0       	rjmp	.+258    	; 0x13a2 <__vector_11+0x280>
    12a0:	11 30       	cpi	r17, 0x01	; 1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <__vector_11+0x184>
    12a4:	6f c0       	rjmp	.+222    	; 0x1384 <__vector_11+0x262>
    12a6:	13 30       	cpi	r17, 0x03	; 3
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_11+0x18a>
    12aa:	7b c0       	rjmp	.+246    	; 0x13a2 <__vector_11+0x280>
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	88 23       	and	r24, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <__vector_11+0x192>
    12b2:	6b c0       	rjmp	.+214    	; 0x138a <__vector_11+0x268>
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <__vector_11+0x1a0>
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	66 e1       	ldi	r22, 0x16	; 22
    12bc:	87 e2       	ldi	r24, 0x27	; 39
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <__vector_11+0x1ac>
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	39 f4       	brne	.+14     	; 0x12d4 <__vector_11+0x1b2>
    12c6:	40 e8       	ldi	r20, 0x80	; 128
    12c8:	68 e0       	ldi	r22, 0x08	; 8
    12ca:	8e e1       	ldi	r24, 0x1E	; 30
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZL24USB_SendStringDescriptorPKhhh>
    12d2:	55 c0       	rjmp	.+170    	; 0x137e <__vector_11+0x25c>
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	09 f0       	breq	.+2      	; 0x12da <__vector_11+0x1b8>
    12d8:	64 c0       	rjmp	.+200    	; 0x13a2 <__vector_11+0x280>
    12da:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_Z12PluggableUSBv>
    12de:	8e 01       	movw	r16, r28
    12e0:	0f 5f       	subi	r16, 0xFF	; 255
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	b8 01       	movw	r22, r16
    12e6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <_ZN13PluggableUSB_12getShortNameEPc>
    12ea:	f8 01       	movw	r30, r16
    12ec:	01 90       	ld	r0, Z+
    12ee:	00 20       	and	r0, r0
    12f0:	e9 f7       	brne	.-6      	; 0x12ec <__vector_11+0x1ca>
    12f2:	31 97       	sbiw	r30, 0x01	; 1
    12f4:	bf 01       	movw	r22, r30
    12f6:	60 1b       	sub	r22, r16
    12f8:	71 0b       	sbc	r23, r17
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	c8 01       	movw	r24, r16
    12fe:	e7 cf       	rjmp	.-50     	; 0x12ce <__vector_11+0x1ac>
    1300:	97 30       	cpi	r25, 0x07	; 7
    1302:	09 f4       	brne	.+2      	; 0x1306 <__vector_11+0x1e4>
    1304:	4e c0       	rjmp	.+156    	; 0x13a2 <__vector_11+0x280>
    1306:	98 30       	cpi	r25, 0x08	; 8
    1308:	21 f4       	brne	.+8      	; 0x1312 <__vector_11+0x1f0>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1310:	44 c0       	rjmp	.+136    	; 0x139a <__vector_11+0x278>
    1312:	99 30       	cpi	r25, 0x09	; 9
    1314:	09 f0       	breq	.+2      	; 0x1318 <__vector_11+0x1f6>
    1316:	41 c0       	rjmp	.+130    	; 0x139a <__vector_11+0x278>
    1318:	83 70       	andi	r24, 0x03	; 3
    131a:	09 f0       	breq	.+2      	; 0x131e <__vector_11+0x1fc>
    131c:	42 c0       	rjmp	.+132    	; 0x13a2 <__vector_11+0x280>
    131e:	ed e0       	ldi	r30, 0x0D	; 13
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	31 e0       	ldi	r19, 0x01	; 1
    1326:	96 e3       	ldi	r25, 0x36	; 54
    1328:	20 81       	ld	r18, Z
    132a:	21 11       	cpse	r18, r1
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <__vector_11+0x21e>
    132e:	8e e7       	ldi	r24, 0x7E	; 126
    1330:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    1334:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    1338:	8f 89       	ldd	r24, Y+23	; 0x17
    133a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <_usbConfiguration>
    133e:	2d c0       	rjmp	.+90     	; 0x139a <__vector_11+0x278>
    1340:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1344:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1348:	21 91       	ld	r18, Z+
    134a:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    134e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	87 30       	cpi	r24, 0x07	; 7
    1356:	41 f7       	brne	.-48     	; 0x1328 <__vector_11+0x206>
    1358:	ea cf       	rjmp	.-44     	; 0x132e <__vector_11+0x20c>
    135a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135e:	0e 94 34 08 	call	0x1068	; 0x1068 <_Z11InitControli>
    1362:	89 8d       	ldd	r24, Y+25	; 0x19
    1364:	81 11       	cpse	r24, r1
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <__vector_11+0x250>
    1368:	8f 2d       	mov	r24, r15
    136a:	90 2f       	mov	r25, r16
    136c:	0e 94 b9 04 	call	0x972	; 0x972 <_Z9CDC_SetupR8USBSetup>
    1370:	06 c0       	rjmp	.+12     	; 0x137e <__vector_11+0x25c>
    1372:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_Z12PluggableUSBv>
    1376:	6f 2d       	mov	r22, r15
    1378:	70 2f       	mov	r23, r16
    137a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_ZN13PluggableUSB_5setupER8USBSetup>
    137e:	88 23       	and	r24, r24
    1380:	81 f0       	breq	.+32     	; 0x13a2 <__vector_11+0x280>
    1382:	0b c0       	rjmp	.+22     	; 0x139a <__vector_11+0x278>
    1384:	6c e0       	ldi	r22, 0x0C	; 12
    1386:	71 e0       	ldi	r23, 0x01	; 1
    1388:	02 c0       	rjmp	.+4      	; 0x138e <__vector_11+0x26c>
    138a:	6e e3       	ldi	r22, 0x3E	; 62
    138c:	71 e0       	ldi	r23, 0x01	; 1
    138e:	fb 01       	movw	r30, r22
    1390:	44 91       	lpm	r20, Z
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	80 e8       	ldi	r24, 0x80	; 128
    1396:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z15USB_SendControlhPKvi>
    139a:	8e ef       	ldi	r24, 0xFE	; 254
    139c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <__vector_11+0x286>
    13a2:	81 e2       	ldi	r24, 0x21	; 33
    13a4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    13a8:	6c 96       	adiw	r28, 0x1c	; 28
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	0f 90       	pop	r0
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	0f 90       	pop	r0
    13e2:	1f 90       	pop	r1
    13e4:	18 95       	reti

000013e6 <_Z9USB_Flushh>:
    13e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    13ea:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_Z9USB_Flushh+0x12>
    13f2:	8a e3       	ldi	r24, 0x3A	; 58
    13f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13f8:	08 95       	ret

000013fa <__vector_10>:
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	cf 93       	push	r28
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
    141e:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1422:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1426:	83 7f       	andi	r24, 0xF3	; 243
    1428:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    142c:	c3 ff       	sbrs	r28, 3
    142e:	0f c0       	rjmp	.+30     	; 0x144e <__vector_10+0x54>
    1430:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    143a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    143e:	82 e3       	ldi	r24, 0x32	; 50
    1440:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1444:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_usbConfiguration>
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    144e:	c2 ff       	sbrs	r28, 2
    1450:	15 c0       	rjmp	.+42     	; 0x147c <__vector_10+0x82>
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_Z9USB_Flushh>
    1458:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <TxLEDPulse>
    145c:	88 23       	and	r24, r24
    145e:	29 f0       	breq	.+10     	; 0x146a <__vector_10+0x70>
    1460:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <TxLEDPulse>
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <TxLEDPulse>
    146a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <RxLEDPulse>
    146e:	88 23       	and	r24, r24
    1470:	29 f0       	breq	.+10     	; 0x147c <__vector_10+0x82>
    1472:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <RxLEDPulse>
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <RxLEDPulse>
    147c:	c4 ff       	sbrs	r28, 4
    147e:	10 c0       	rjmp	.+32     	; 0x14a0 <__vector_10+0xa6>
    1480:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1484:	8e 7e       	andi	r24, 0xEE	; 238
    1486:	81 60       	ori	r24, 0x01	; 1
    1488:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    148c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1490:	8f 7e       	andi	r24, 0xEF	; 239
    1492:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1496:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_usbSuspendState>
    149a:	8e 7e       	andi	r24, 0xEE	; 238
    149c:	80 61       	ori	r24, 0x10	; 16
    149e:	11 c0       	rjmp	.+34     	; 0x14c2 <__vector_10+0xc8>
    14a0:	c0 ff       	sbrs	r28, 0
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <__vector_10+0xcc>
    14a4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    14a8:	8e 7e       	andi	r24, 0xEE	; 238
    14aa:	80 61       	ori	r24, 0x10	; 16
    14ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    14b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    14b4:	8e 7e       	andi	r24, 0xEE	; 238
    14b6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    14ba:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <_usbSuspendState>
    14be:	8e 7e       	andi	r24, 0xEE	; 238
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <_usbSuspendState>
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	cf 91       	pop	r28
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	0f 90       	pop	r0
    14e6:	1f 90       	pop	r1
    14e8:	18 95       	reti

000014ea <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    14ea:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <_usbConfiguration>
	_usbCurrentStatus = 0;
    14ee:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <_usbCurrentStatus>
	_usbSuspendState = 0;
    14f2:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <_usbSuspendState>
	USB_ClockEnable();
    14f6:	0e 94 ca 06 	call	0xd94	; 0xd94 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    14fa:	e1 ee       	ldi	r30, 0xE1	; 225
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8e 7e       	andi	r24, 0xEE	; 238
    1502:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    1504:	8d e0       	ldi	r24, 0x0D	; 13
    1506:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    150a:	08 95       	ret

0000150c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	8f 93       	push	r24
    151c:	9f 93       	push	r25
    151e:	af 93       	push	r26
    1520:	bf 93       	push	r27
    1522:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <timer0_millis>
    1526:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <timer0_millis+0x1>
    152a:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <timer0_millis+0x2>
    152e:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <timer0_millis+0x3>
    1532:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <timer0_fract>
    1536:	26 e0       	ldi	r18, 0x06	; 6
    1538:	23 0f       	add	r18, r19
    153a:	2d 37       	cpi	r18, 0x7D	; 125
    153c:	20 f4       	brcc	.+8      	; 0x1546 <__vector_23+0x3a>
    153e:	02 96       	adiw	r24, 0x02	; 2
    1540:	a1 1d       	adc	r26, r1
    1542:	b1 1d       	adc	r27, r1
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <__vector_23+0x44>
    1546:	29 e8       	ldi	r18, 0x89	; 137
    1548:	23 0f       	add	r18, r19
    154a:	03 96       	adiw	r24, 0x03	; 3
    154c:	a1 1d       	adc	r26, r1
    154e:	b1 1d       	adc	r27, r1
    1550:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <timer0_fract>
    1554:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <timer0_millis>
    1558:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <timer0_millis+0x1>
    155c:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <timer0_millis+0x2>
    1560:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <timer0_millis+0x3>
    1564:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer0_overflow_count>
    1568:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer0_overflow_count+0x1>
    156c:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer0_overflow_count+0x2>
    1570:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer0_overflow_count+0x3>
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	a1 1d       	adc	r26, r1
    1578:	b1 1d       	adc	r27, r1
    157a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <timer0_overflow_count>
    157e:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <timer0_overflow_count+0x1>
    1582:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <timer0_overflow_count+0x2>
    1586:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <timer0_overflow_count+0x3>
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <millis>:
    15a0:	2f b7       	in	r18, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <timer0_millis>
    15a8:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <timer0_millis+0x1>
    15ac:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <timer0_millis+0x2>
    15b0:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <timer0_millis+0x3>
    15b4:	2f bf       	out	0x3f, r18	; 63
    15b6:	08 95       	ret

000015b8 <micros>:
    15b8:	3f b7       	in	r19, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer0_overflow_count>
    15c0:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer0_overflow_count+0x1>
    15c4:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer0_overflow_count+0x2>
    15c8:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer0_overflow_count+0x3>
    15cc:	26 b5       	in	r18, 0x26	; 38
    15ce:	a8 9b       	sbis	0x15, 0	; 21
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <micros+0x24>
    15d2:	2f 3f       	cpi	r18, 0xFF	; 255
    15d4:	19 f0       	breq	.+6      	; 0x15dc <micros+0x24>
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	a1 1d       	adc	r26, r1
    15da:	b1 1d       	adc	r27, r1
    15dc:	3f bf       	out	0x3f, r19	; 63
    15de:	ba 2f       	mov	r27, r26
    15e0:	a9 2f       	mov	r26, r25
    15e2:	98 2f       	mov	r25, r24
    15e4:	88 27       	eor	r24, r24
    15e6:	82 0f       	add	r24, r18
    15e8:	91 1d       	adc	r25, r1
    15ea:	a1 1d       	adc	r26, r1
    15ec:	b1 1d       	adc	r27, r1
    15ee:	bc 01       	movw	r22, r24
    15f0:	cd 01       	movw	r24, r26
    15f2:	43 e0       	ldi	r20, 0x03	; 3
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	88 1f       	adc	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	4a 95       	dec	r20
    15fe:	d1 f7       	brne	.-12     	; 0x15f4 <micros+0x3c>
    1600:	08 95       	ret

00001602 <delay>:
    1602:	8f 92       	push	r8
    1604:	9f 92       	push	r9
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	6b 01       	movw	r12, r22
    1614:	7c 01       	movw	r14, r24
    1616:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <micros>
    161a:	4b 01       	movw	r8, r22
    161c:	5c 01       	movw	r10, r24
    161e:	c1 14       	cp	r12, r1
    1620:	d1 04       	cpc	r13, r1
    1622:	e1 04       	cpc	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 f1       	breq	.+64     	; 0x1668 <delay+0x66>
    1628:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <yield>
    162c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <micros>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	88 19       	sub	r24, r8
    1636:	99 09       	sbc	r25, r9
    1638:	aa 09       	sbc	r26, r10
    163a:	bb 09       	sbc	r27, r11
    163c:	88 3e       	cpi	r24, 0xE8	; 232
    163e:	93 40       	sbci	r25, 0x03	; 3
    1640:	a1 05       	cpc	r26, r1
    1642:	b1 05       	cpc	r27, r1
    1644:	60 f3       	brcs	.-40     	; 0x161e <delay+0x1c>
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	c2 1a       	sub	r12, r18
    164a:	d1 08       	sbc	r13, r1
    164c:	e1 08       	sbc	r14, r1
    164e:	f1 08       	sbc	r15, r1
    1650:	88 ee       	ldi	r24, 0xE8	; 232
    1652:	88 0e       	add	r8, r24
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	98 1e       	adc	r9, r24
    1658:	a1 1c       	adc	r10, r1
    165a:	b1 1c       	adc	r11, r1
    165c:	c1 14       	cp	r12, r1
    165e:	d1 04       	cpc	r13, r1
    1660:	e1 04       	cpc	r14, r1
    1662:	f1 04       	cpc	r15, r1
    1664:	19 f7       	brne	.-58     	; 0x162c <delay+0x2a>
    1666:	db cf       	rjmp	.-74     	; 0x161e <delay+0x1c>
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	08 95       	ret

0000167a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    167a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    167c:	84 b5       	in	r24, 0x24	; 36
    167e:	82 60       	ori	r24, 0x02	; 2
    1680:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1682:	84 b5       	in	r24, 0x24	; 36
    1684:	81 60       	ori	r24, 0x01	; 1
    1686:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1688:	85 b5       	in	r24, 0x25	; 37
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    168e:	85 b5       	in	r24, 0x25	; 37
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1694:	ee e6       	ldi	r30, 0x6E	; 110
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    169e:	e1 e8       	ldi	r30, 0x81	; 129
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    16a4:	80 81       	ld	r24, Z
    16a6:	82 60       	ori	r24, 0x02	; 2
    16a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    16aa:	80 81       	ld	r24, Z
    16ac:	81 60       	ori	r24, 0x01	; 1
    16ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    16b0:	e0 e8       	ldi	r30, 0x80	; 128
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	81 60       	ori	r24, 0x01	; 1
    16b8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    16ba:	e1 e9       	ldi	r30, 0x91	; 145
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	82 60       	ori	r24, 0x02	; 2
    16c2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    16c4:	80 81       	ld	r24, Z
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    16ca:	e0 e9       	ldi	r30, 0x90	; 144
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    16d4:	e1 ec       	ldi	r30, 0xC1	; 193
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	84 60       	ori	r24, 0x04	; 4
    16dc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    16de:	80 81       	ld	r24, Z
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    16e4:	80 81       	ld	r24, Z
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    16ea:	e3 ec       	ldi	r30, 0xC3	; 195
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	81 60       	ori	r24, 0x01	; 1
    16f2:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    16f4:	e0 ec       	ldi	r30, 0xC0	; 192
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    16fe:	e2 ec       	ldi	r30, 0xC2	; 194
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1708:	ea e7       	ldi	r30, 0x7A	; 122
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1718:	80 81       	ld	r24, Z
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    171e:	80 81       	ld	r24, Z
    1720:	80 68       	ori	r24, 0x80	; 128
    1722:	80 83       	st	Z, r24
    1724:	08 95       	ret

00001726 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	31 97       	sbiw	r30, 0x01	; 1
    172c:	ef 30       	cpi	r30, 0x0F	; 15
    172e:	f1 05       	cpc	r31, r1
    1730:	b0 f5       	brcc	.+108    	; 0x179e <turnOffPWM+0x78>
    1732:	ea 5a       	subi	r30, 0xAA	; 170
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    173a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    173e:	8f 77       	andi	r24, 0x7F	; 127
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1742:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1746:	8f 7d       	andi	r24, 0xDF	; 223
    1748:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    174c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    174e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	f9 cf       	rjmp	.-14     	; 0x1748 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1756:	84 b5       	in	r24, 0x24	; 36
    1758:	8f 77       	andi	r24, 0x7F	; 127
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    175c:	84 b5       	in	r24, 0x24	; 36
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	84 bd       	out	0x24, r24	; 36
    1762:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1764:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	07 c0       	rjmp	.+14     	; 0x177a <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    176c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1770:	8f 7d       	andi	r24, 0xDF	; 223
    1772:	03 c0       	rjmp	.+6      	; 0x177a <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1774:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1778:	87 7f       	andi	r24, 0xF7	; 247
    177a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    177e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1780:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1784:	8f 77       	andi	r24, 0x7F	; 127
    1786:	03 c0       	rjmp	.+6      	; 0x178e <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1788:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    178c:	8f 7d       	andi	r24, 0xDF	; 223
    178e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1792:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    1794:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1798:	87 7f       	andi	r24, 0xF7	; 247
    179a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    179e:	08 95       	ret

000017a0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	fc 01       	movw	r30, r24
    17a8:	ef 59       	subi	r30, 0x9F	; 159
    17aa:	fe 4f       	sbci	r31, 0xFE	; 254
    17ac:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    17ae:	fc 01       	movw	r30, r24
    17b0:	e0 58       	subi	r30, 0x80	; 128
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    17b6:	88 23       	and	r24, r24
    17b8:	61 f1       	breq	.+88     	; 0x1812 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	fc 01       	movw	r30, r24
    17c2:	e5 54       	subi	r30, 0x45	; 69
    17c4:	fe 4f       	sbci	r31, 0xFE	; 254
    17c6:	c5 91       	lpm	r28, Z+
    17c8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    17ca:	fc 01       	movw	r30, r24
    17cc:	e3 55       	subi	r30, 0x53	; 83
    17ce:	fe 4f       	sbci	r31, 0xFE	; 254
    17d0:	a5 91       	lpm	r26, Z+
    17d2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    17d4:	61 11       	cpse	r22, r1
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    17d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17da:	f8 94       	cli
		*reg &= ~bit;
    17dc:	88 81       	ld	r24, Y
    17de:	20 95       	com	r18
    17e0:	82 23       	and	r24, r18
    17e2:	88 83       	st	Y, r24
		*out &= ~bit;
    17e4:	ec 91       	ld	r30, X
    17e6:	2e 23       	and	r18, r30
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17ea:	62 30       	cpi	r22, 0x02	; 2
    17ec:	61 f4       	brne	.+24     	; 0x1806 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    17ee:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17f0:	f8 94       	cli
		*reg &= ~bit;
    17f2:	88 81       	ld	r24, Y
    17f4:	32 2f       	mov	r19, r18
    17f6:	30 95       	com	r19
    17f8:	83 23       	and	r24, r19
    17fa:	88 83       	st	Y, r24
		*out |= bit;
    17fc:	ec 91       	ld	r30, X
    17fe:	2e 2b       	or	r18, r30
    1800:	2c 93       	st	X, r18
		SREG = oldSREG;
    1802:	9f bf       	out	0x3f, r25	; 63
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1806:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1808:	f8 94       	cli
		*reg |= bit;
    180a:	e8 81       	ld	r30, Y
    180c:	2e 2b       	or	r18, r30
    180e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1810:	8f bf       	out	0x3f, r24	; 63
	}
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	ee 5b       	subi	r30, 0xBE	; 190
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    182a:	f9 01       	movw	r30, r18
    182c:	ef 59       	subi	r30, 0x9F	; 159
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1832:	f9 01       	movw	r30, r18
    1834:	e0 58       	subi	r30, 0x80	; 128
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    183a:	cc 23       	and	r28, r28
    183c:	c1 f0       	breq	.+48     	; 0x186e <digitalWrite+0x56>
    183e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1840:	81 11       	cpse	r24, r1
    1842:	0e 94 93 0b 	call	0x1726	; 0x1726 <turnOffPWM>

	out = portOutputRegister(port);
    1846:	ec 2f       	mov	r30, r28
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	ee 0f       	add	r30, r30
    184c:	ff 1f       	adc	r31, r31
    184e:	e3 55       	subi	r30, 0x53	; 83
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	a5 91       	lpm	r26, Z+
    1854:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1856:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1858:	f8 94       	cli

	if (val == LOW) {
    185a:	11 11       	cpse	r17, r1
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <digitalWrite+0x4e>
		*out &= ~bit;
    185e:	8c 91       	ld	r24, X
    1860:	d0 95       	com	r29
    1862:	d8 23       	and	r29, r24
    1864:	02 c0       	rjmp	.+4      	; 0x186a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1866:	ec 91       	ld	r30, X
    1868:	de 2b       	or	r29, r30
    186a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    186c:	9f bf       	out	0x3f, r25	; 63
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	08 95       	ret

00001876 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	ee 5b       	subi	r30, 0xBE	; 190
    1882:	fe 4f       	sbci	r31, 0xFE	; 254
    1884:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1886:	f9 01       	movw	r30, r18
    1888:	ef 59       	subi	r30, 0x9F	; 159
    188a:	fe 4f       	sbci	r31, 0xFE	; 254
    188c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    188e:	f9 01       	movw	r30, r18
    1890:	e0 58       	subi	r30, 0x80	; 128
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1896:	cc 23       	and	r28, r28
    1898:	91 f0       	breq	.+36     	; 0x18be <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    189a:	81 11       	cpse	r24, r1
    189c:	0e 94 93 0b 	call	0x1726	; 0x1726 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    18a0:	ec 2f       	mov	r30, r28
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	e1 56       	subi	r30, 0x61	; 97
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	a5 91       	lpm	r26, Z+
    18ae:	b4 91       	lpm	r27, Z
    18b0:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    18b2:	ed 23       	and	r30, r29
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	21 f4       	brne	.+8      	; 0x18c2 <digitalRead+0x4c>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <digitalRead+0x4c>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <_ZN7TwoWire9availableEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    18c8:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    18d2:	82 1b       	sub	r24, r18
    18d4:	91 09       	sbc	r25, r1
    18d6:	08 95       	ret

000018d8 <_ZN7TwoWire4readEv>:
    18d8:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    18dc:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    18e0:	98 17       	cp	r25, r24
    18e2:	50 f4       	brcc	.+20     	; 0x18f8 <_ZN7TwoWire4readEv+0x20>
    18e4:	e9 2f       	mov	r30, r25
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	e7 5c       	subi	r30, 0xC7	; 199
    18ea:	fc 4f       	sbci	r31, 0xFC	; 252
    18ec:	20 81       	ld	r18, Z
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	9f 5f       	subi	r25, 0xFF	; 255
    18f2:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <_ZN7TwoWire4readEv+0x24>
    18f8:	2f ef       	ldi	r18, 0xFF	; 255
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	c9 01       	movw	r24, r18
    18fe:	08 95       	ret

00001900 <_ZN7TwoWire4peekEv>:
    1900:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    1904:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    1908:	e8 17       	cp	r30, r24
    190a:	30 f4       	brcc	.+12     	; 0x1918 <_ZN7TwoWire4peekEv+0x18>
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	e7 5c       	subi	r30, 0xC7	; 199
    1910:	fc 4f       	sbci	r31, 0xFC	; 252
    1912:	80 81       	ld	r24, Z
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	08 95       	ret
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	08 95       	ret

0000191e <_ZN7TwoWire5flushEv>:
    191e:	08 95       	ret

00001920 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	ec 01       	movw	r28, r24
    1926:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <_ZN7TwoWire14user_onReceiveE>
    192a:	f0 91 11 03 	lds	r31, 0x0311	; 0x800311 <_ZN7TwoWire14user_onReceiveE+0x1>
    192e:	30 97       	sbiw	r30, 0x00	; 0
    1930:	f1 f0       	breq	.+60     	; 0x196e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1932:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    1936:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    193a:	98 17       	cp	r25, r24
    193c:	c0 f0       	brcs	.+48     	; 0x196e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	29 2f       	mov	r18, r25
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	26 17       	cp	r18, r22
    1946:	37 07       	cpc	r19, r23
    1948:	54 f4       	brge	.+20     	; 0x195e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    194a:	de 01       	movw	r26, r28
    194c:	a2 0f       	add	r26, r18
    194e:	b3 1f       	adc	r27, r19
    1950:	4c 91       	ld	r20, X
    1952:	d9 01       	movw	r26, r18
    1954:	a7 5c       	subi	r26, 0xC7	; 199
    1956:	bc 4f       	sbci	r27, 0xFC	; 252
    1958:	4c 93       	st	X, r20
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	f1 cf       	rjmp	.-30     	; 0x1940 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    195e:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    1962:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    1966:	cb 01       	movw	r24, r22
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	09 94       	ijmp
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <_ZN7TwoWire16onRequestServiceEv>:
    1974:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <_ZN7TwoWire14user_onRequestE>
    1978:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <_ZN7TwoWire14user_onRequestE+0x1>
    197c:	30 97       	sbiw	r30, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1980:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    1984:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    1988:	09 94       	ijmp
    198a:	08 95       	ret

0000198c <_ZN7TwoWire5writeEPKhj>:
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	7c 01       	movw	r14, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8a 01       	movw	r16, r20
    19a2:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire12transmittingE>
    19a6:	22 23       	and	r18, r18
    19a8:	89 f0       	breq	.+34     	; 0x19cc <_ZN7TwoWire5writeEPKhj+0x40>
    19aa:	eb 01       	movw	r28, r22
    19ac:	6b 01       	movw	r12, r22
    19ae:	c4 0e       	add	r12, r20
    19b0:	d5 1e       	adc	r13, r21
    19b2:	cc 15       	cp	r28, r12
    19b4:	dd 05       	cpc	r29, r13
    19b6:	69 f0       	breq	.+26     	; 0x19d2 <_ZN7TwoWire5writeEPKhj+0x46>
    19b8:	69 91       	ld	r22, Y+
    19ba:	d7 01       	movw	r26, r14
    19bc:	ed 91       	ld	r30, X+
    19be:	fc 91       	ld	r31, X
    19c0:	01 90       	ld	r0, Z+
    19c2:	f0 81       	ld	r31, Z
    19c4:	e0 2d       	mov	r30, r0
    19c6:	c7 01       	movw	r24, r14
    19c8:	09 95       	icall
    19ca:	f3 cf       	rjmp	.-26     	; 0x19b2 <_ZN7TwoWire5writeEPKhj+0x26>
    19cc:	64 2f       	mov	r22, r20
    19ce:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <twi_transmit>
    19d2:	c8 01       	movw	r24, r16
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	df 90       	pop	r13
    19e2:	cf 90       	pop	r12
    19e4:	08 95       	ret

000019e6 <_ZN7TwoWire5writeEh>:
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	1f 92       	push	r1
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	69 83       	std	Y+1, r22	; 0x01
    19f2:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire12transmittingE>
    19f6:	22 23       	and	r18, r18
    19f8:	d1 f0       	breq	.+52     	; 0x1a2e <_ZN7TwoWire5writeEh+0x48>
    19fa:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    19fe:	20 32       	cpi	r18, 0x20	; 32
    1a00:	40 f0       	brcs	.+16     	; 0x1a12 <_ZN7TwoWire5writeEh+0x2c>
    1a02:	21 e0       	ldi	r18, 0x01	; 1
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	fc 01       	movw	r30, r24
    1a08:	33 83       	std	Z+3, r19	; 0x03
    1a0a:	22 83       	std	Z+2, r18	; 0x02
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	15 c0       	rjmp	.+42     	; 0x1a3c <_ZN7TwoWire5writeEh+0x56>
    1a12:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    1a16:	e8 2f       	mov	r30, r24
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	e9 5e       	subi	r30, 0xE9	; 233
    1a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a1e:	99 81       	ldd	r25, Y+1	; 0x01
    1a20:	90 83       	st	Z, r25
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    1a28:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <_ZN7TwoWire5writeEh+0x52>
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <twi_transmit>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0f 90       	pop	r0
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <_ZN7TwoWireC1Ev>:
    1a44:	fc 01       	movw	r30, r24
    1a46:	13 82       	std	Z+3, r1	; 0x03
    1a48:	12 82       	std	Z+2, r1	; 0x02
    1a4a:	88 ee       	ldi	r24, 0xE8	; 232
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	84 83       	std	Z+4, r24	; 0x04
    1a54:	95 83       	std	Z+5, r25	; 0x05
    1a56:	a6 83       	std	Z+6, r26	; 0x06
    1a58:	b7 83       	std	Z+7, r27	; 0x07
    1a5a:	89 e8       	ldi	r24, 0x89	; 137
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	08 95       	ret

00001a64 <_ZN7TwoWire5beginEv>:
    1a64:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    1a68:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    1a6c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_ZN7TwoWire13txBufferIndexE>
    1a70:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire14txBufferLengthE>
    1a74:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <twi_init>

00001a78 <_ZN7TwoWire5beginEh>:
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	ec 01       	movw	r28, r24
    1a7e:	86 2f       	mov	r24, r22
    1a80:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <twi_setAddress>
    1a84:	8a eb       	ldi	r24, 0xBA	; 186
    1a86:	9c e0       	ldi	r25, 0x0C	; 12
    1a88:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <twi_attachSlaveTxEvent>
    1a8c:	80 e9       	ldi	r24, 0x90	; 144
    1a8e:	9c e0       	ldi	r25, 0x0C	; 12
    1a90:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <twi_attachSlaveRxEvent>
    1a94:	ce 01       	movw	r24, r28
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <_ZN7TwoWire5beginEv>

00001a9e <_ZN7TwoWire5beginEi>:
    1a9e:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_ZN7TwoWire5beginEh>

00001aa2 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    1aa2:	70 93 11 03 	sts	0x0311, r23	; 0x800311 <_ZN7TwoWire14user_onReceiveE+0x1>
    1aa6:	60 93 10 03 	sts	0x0310, r22	; 0x800310 <_ZN7TwoWire14user_onReceiveE>
    1aaa:	08 95       	ret

00001aac <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1aac:	70 93 13 03 	sts	0x0313, r23	; 0x800313 <_ZN7TwoWire14user_onRequestE+0x1>
    1ab0:	60 93 12 03 	sts	0x0312, r22	; 0x800312 <_ZN7TwoWire14user_onRequestE>
    1ab4:	08 95       	ret

00001ab6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1ab6:	84 e0       	ldi	r24, 0x04	; 4
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_ZN7TwoWireC1Ev>

00001abe <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1abe:	08 95       	ret

00001ac0 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	7b 01       	movw	r14, r22
    1ace:	fc 01       	movw	r30, r24
    1ad0:	c2 81       	ldd	r28, Z+2	; 0x02
    1ad2:	d3 81       	ldd	r29, Z+3	; 0x03
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	20 97       	sbiw	r28, 0x00	; 0
    1ada:	81 f0       	breq	.+32     	; 0x1afc <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    1adc:	e8 81       	ld	r30, Y
    1ade:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae0:	02 80       	ldd	r0, Z+2	; 0x02
    1ae2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	ce 01       	movw	r24, r28
    1aea:	09 95       	icall
    1aec:	97 fd       	sbrc	r25, 7
    1aee:	08 c0       	rjmp	.+16     	; 0x1b00 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    1af0:	08 0f       	add	r16, r24
    1af2:	19 1f       	adc	r17, r25
    1af4:	08 84       	ldd	r0, Y+8	; 0x08
    1af6:	d9 85       	ldd	r29, Y+9	; 0x09
    1af8:	c0 2d       	mov	r28, r0
    1afa:	ee cf       	rjmp	.-36     	; 0x1ad8 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    1afc:	c8 01       	movw	r24, r16
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    1b00:	8f ef       	ldi	r24, 0xFF	; 255
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	08 95       	ret

00001b12 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	8b 01       	movw	r16, r22
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	c2 81       	ldd	r28, Z+2	; 0x02
    1b20:	d3 81       	ldd	r29, Z+3	; 0x03
    1b22:	20 97       	sbiw	r28, 0x00	; 0
    1b24:	71 f0       	breq	.+28     	; 0x1b42 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    1b26:	e8 81       	ld	r30, Y
    1b28:	f9 81       	ldd	r31, Y+1	; 0x01
    1b2a:	04 80       	ldd	r0, Z+4	; 0x04
    1b2c:	f5 81       	ldd	r31, Z+5	; 0x05
    1b2e:	e0 2d       	mov	r30, r0
    1b30:	b8 01       	movw	r22, r16
    1b32:	ce 01       	movw	r24, r28
    1b34:	09 95       	icall
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	31 f4       	brne	.+12     	; 0x1b46 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    1b3a:	08 84       	ldd	r0, Y+8	; 0x08
    1b3c:	d9 85       	ldd	r29, Y+9	; 0x09
    1b3e:	c0 2d       	mov	r28, r0
    1b40:	f0 cf       	rjmp	.-32     	; 0x1b22 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <_ZN13PluggableUSB_12getShortNameEPc>:
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	8b 01       	movw	r16, r22
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	c2 81       	ldd	r28, Z+2	; 0x02
    1b5e:	d3 81       	ldd	r29, Z+3	; 0x03
    1b60:	20 97       	sbiw	r28, 0x00	; 0
    1b62:	71 f0       	breq	.+28     	; 0x1b80 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	06 80       	ldd	r0, Z+6	; 0x06
    1b6a:	f7 81       	ldd	r31, Z+7	; 0x07
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	b8 01       	movw	r22, r16
    1b70:	ce 01       	movw	r24, r28
    1b72:	09 95       	icall
    1b74:	08 0f       	add	r16, r24
    1b76:	11 1d       	adc	r17, r1
    1b78:	08 84       	ldd	r0, Y+8	; 0x08
    1b7a:	d9 85       	ldd	r29, Y+9	; 0x09
    1b7c:	c0 2d       	mov	r28, r0
    1b7e:	f0 cf       	rjmp	.-32     	; 0x1b60 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    1b80:	f8 01       	movw	r30, r16
    1b82:	10 82       	st	Z, r1
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <_ZN13PluggableUSB_5setupER8USBSetup>:
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	8b 01       	movw	r16, r22
    1b98:	fc 01       	movw	r30, r24
    1b9a:	c2 81       	ldd	r28, Z+2	; 0x02
    1b9c:	d3 81       	ldd	r29, Z+3	; 0x03
    1b9e:	20 97       	sbiw	r28, 0x00	; 0
    1ba0:	71 f0       	breq	.+28     	; 0x1bbe <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    1ba2:	e8 81       	ld	r30, Y
    1ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba6:	01 90       	ld	r0, Z+
    1ba8:	f0 81       	ld	r31, Z
    1baa:	e0 2d       	mov	r30, r0
    1bac:	b8 01       	movw	r22, r16
    1bae:	ce 01       	movw	r24, r28
    1bb0:	09 95       	icall
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    1bb6:	08 84       	ldd	r0, Y+8	; 0x08
    1bb8:	d9 85       	ldd	r29, Y+9	; 0x09
    1bba:	c0 2d       	mov	r28, r0
    1bbc:	f0 cf       	rjmp	.-32     	; 0x1b9e <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1bca:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZGVZ12PluggableUSBvE3obj>
    1bce:	81 11       	cpse	r24, r1
    1bd0:	0d c0       	rjmp	.+26     	; 0x1bec <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_ZZ12PluggableUSBvE3obj>
    1bd8:	84 e0       	ldi	r24, 0x04	; 4
    1bda:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_ZZ12PluggableUSBvE3obj+0x1>
    1bde:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZZ12PluggableUSBvE3obj+0x3>
    1be2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    1bec:	89 e5       	ldi	r24, 0x59	; 89
    1bee:	93 e0       	ldi	r25, 0x03	; 3
    1bf0:	08 95       	ret

00001bf2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bf2:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_state>
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_sendStop>
    1bfc:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <twi_inRepStart>
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <digitalWrite>
    1c10:	e9 eb       	ldi	r30, 0xB9	; 185
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8e 7f       	andi	r24, 0xFE	; 254
    1c18:	80 83       	st	Z, r24
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8d 7f       	andi	r24, 0xFD	; 253
    1c1e:	80 83       	st	Z, r24
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1c26:	85 e4       	ldi	r24, 0x45	; 69
    1c28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1c2c:	08 95       	ret

00001c2e <twi_setAddress>:
    1c2e:	88 0f       	add	r24, r24
    1c30:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    1c34:	08 95       	ret

00001c36 <twi_transmit>:
    1c36:	61 32       	cpi	r22, 0x21	; 33
    1c38:	98 f4       	brcc	.+38     	; 0x1c60 <twi_transmit+0x2a>
    1c3a:	20 91 d2 03 	lds	r18, 0x03D2	; 0x8003d2 <twi_state>
    1c3e:	24 30       	cpi	r18, 0x04	; 4
    1c40:	89 f4       	brne	.+34     	; 0x1c64 <twi_transmit+0x2e>
    1c42:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <twi_txBufferLength>
    1c46:	28 2f       	mov	r18, r24
    1c48:	a9 e8       	ldi	r26, 0x89	; 137
    1c4a:	b3 e0       	ldi	r27, 0x03	; 3
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	8e 2f       	mov	r24, r30
    1c50:	82 1b       	sub	r24, r18
    1c52:	86 17       	cp	r24, r22
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <twi_transmit+0x26>
    1c56:	81 91       	ld	r24, Z+
    1c58:	8d 93       	st	X+, r24
    1c5a:	f9 cf       	rjmp	.-14     	; 0x1c4e <twi_transmit+0x18>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	08 95       	ret
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	08 95       	ret
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	08 95       	ret

00001c68 <twi_attachSlaveRxEvent>:
    1c68:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <twi_onSlaveReceive+0x1>
    1c6c:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <twi_onSlaveReceive>
    1c70:	08 95       	ret

00001c72 <twi_attachSlaveTxEvent>:
    1c72:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <twi_onSlaveTransmit+0x1>
    1c76:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <twi_onSlaveTransmit>
    1c7a:	08 95       	ret

00001c7c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1c7c:	85 ed       	ldi	r24, 0xD5	; 213
    1c7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1c82:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1c86:	84 fd       	sbrc	r24, 4
    1c88:	fc cf       	rjmp	.-8      	; 0x1c82 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1c8a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_state>
    1c8e:	08 95       	ret

00001c90 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1c90:	85 ec       	ldi	r24, 0xC5	; 197
    1c92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

  // update twi state
  twi_state = TWI_READY;
    1c96:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_state>
    1c9a:	08 95       	ret

00001c9c <__vector_36>:
}

ISR(TWI_vect)
{
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	2f 93       	push	r18
    1ca8:	3f 93       	push	r19
    1caa:	4f 93       	push	r20
    1cac:	5f 93       	push	r21
    1cae:	6f 93       	push	r22
    1cb0:	7f 93       	push	r23
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	af 93       	push	r26
    1cb8:	bf 93       	push	r27
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31
  switch(TW_STATUS){
    1cbe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1cc2:	88 7f       	andi	r24, 0xF8	; 248
    1cc4:	80 36       	cpi	r24, 0x60	; 96
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <__vector_36+0x2e>
    1cc8:	9c c0       	rjmp	.+312    	; 0x1e02 <__vector_36+0x166>
    1cca:	68 f5       	brcc	.+90     	; 0x1d26 <__vector_36+0x8a>
    1ccc:	88 32       	cpi	r24, 0x28	; 40
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <__vector_36+0x36>
    1cd0:	5b c0       	rjmp	.+182    	; 0x1d88 <__vector_36+0xec>
    1cd2:	90 f4       	brcc	.+36     	; 0x1cf8 <__vector_36+0x5c>
    1cd4:	80 31       	cpi	r24, 0x10	; 16
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <__vector_36+0x3e>
    1cd8:	54 c0       	rjmp	.+168    	; 0x1d82 <__vector_36+0xe6>
    1cda:	38 f4       	brcc	.+14     	; 0x1cea <__vector_36+0x4e>
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <__vector_36+0x46>
    1ce0:	f5 c0       	rjmp	.+490    	; 0x1ecc <__vector_36+0x230>
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <__vector_36+0x4c>
    1ce6:	4d c0       	rjmp	.+154    	; 0x1d82 <__vector_36+0xe6>
    1ce8:	f5 c0       	rjmp	.+490    	; 0x1ed4 <__vector_36+0x238>
    1cea:	88 31       	cpi	r24, 0x18	; 24
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <__vector_36+0x54>
    1cee:	4c c0       	rjmp	.+152    	; 0x1d88 <__vector_36+0xec>
    1cf0:	80 32       	cpi	r24, 0x20	; 32
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <__vector_36+0x5a>
    1cf4:	5d c0       	rjmp	.+186    	; 0x1db0 <__vector_36+0x114>
    1cf6:	ee c0       	rjmp	.+476    	; 0x1ed4 <__vector_36+0x238>
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <__vector_36+0x62>
    1cfc:	68 c0       	rjmp	.+208    	; 0x1dce <__vector_36+0x132>
    1cfe:	48 f4       	brcc	.+18     	; 0x1d12 <__vector_36+0x76>
    1d00:	80 33       	cpi	r24, 0x30	; 48
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <__vector_36+0x6a>
    1d04:	55 c0       	rjmp	.+170    	; 0x1db0 <__vector_36+0x114>
    1d06:	88 33       	cpi	r24, 0x38	; 56
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <__vector_36+0x70>
    1d0a:	e4 c0       	rjmp	.+456    	; 0x1ed4 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d0c:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_error>
    1d10:	a8 c0       	rjmp	.+336    	; 0x1e62 <__vector_36+0x1c6>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d12:	80 35       	cpi	r24, 0x50	; 80
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <__vector_36+0x7c>
    1d16:	4f c0       	rjmp	.+158    	; 0x1db6 <__vector_36+0x11a>
    1d18:	88 35       	cpi	r24, 0x58	; 88
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <__vector_36+0x82>
    1d1c:	5d c0       	rjmp	.+186    	; 0x1dd8 <__vector_36+0x13c>
    1d1e:	88 34       	cpi	r24, 0x48	; 72
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__vector_36+0x88>
    1d22:	d8 c0       	rjmp	.+432    	; 0x1ed4 <__vector_36+0x238>
    1d24:	d5 c0       	rjmp	.+426    	; 0x1ed0 <__vector_36+0x234>
    1d26:	88 39       	cpi	r24, 0x98	; 152
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <__vector_36+0x90>
    1d2a:	c6 c0       	rjmp	.+396    	; 0x1eb8 <__vector_36+0x21c>
    1d2c:	a8 f4       	brcc	.+42     	; 0x1d58 <__vector_36+0xbc>
    1d2e:	88 37       	cpi	r24, 0x78	; 120
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <__vector_36+0x98>
    1d32:	67 c0       	rjmp	.+206    	; 0x1e02 <__vector_36+0x166>
    1d34:	38 f4       	brcc	.+14     	; 0x1d44 <__vector_36+0xa8>
    1d36:	88 36       	cpi	r24, 0x68	; 104
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <__vector_36+0xa0>
    1d3a:	63 c0       	rjmp	.+198    	; 0x1e02 <__vector_36+0x166>
    1d3c:	80 37       	cpi	r24, 0x70	; 112
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <__vector_36+0xa6>
    1d40:	60 c0       	rjmp	.+192    	; 0x1e02 <__vector_36+0x166>
    1d42:	c8 c0       	rjmp	.+400    	; 0x1ed4 <__vector_36+0x238>
    1d44:	88 38       	cpi	r24, 0x88	; 136
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <__vector_36+0xae>
    1d48:	b7 c0       	rjmp	.+366    	; 0x1eb8 <__vector_36+0x21c>
    1d4a:	80 39       	cpi	r24, 0x90	; 144
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <__vector_36+0xb4>
    1d4e:	5f c0       	rjmp	.+190    	; 0x1e0e <__vector_36+0x172>
    1d50:	80 38       	cpi	r24, 0x80	; 128
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <__vector_36+0xba>
    1d54:	bf c0       	rjmp	.+382    	; 0x1ed4 <__vector_36+0x238>
    1d56:	5b c0       	rjmp	.+182    	; 0x1e0e <__vector_36+0x172>
    1d58:	80 3b       	cpi	r24, 0xB0	; 176
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <__vector_36+0xc2>
    1d5c:	85 c0       	rjmp	.+266    	; 0x1e68 <__vector_36+0x1cc>
    1d5e:	38 f4       	brcc	.+14     	; 0x1d6e <__vector_36+0xd2>
    1d60:	80 3a       	cpi	r24, 0xA0	; 160
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <__vector_36+0xca>
    1d64:	66 c0       	rjmp	.+204    	; 0x1e32 <__vector_36+0x196>
    1d66:	88 3a       	cpi	r24, 0xA8	; 168
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__vector_36+0xd0>
    1d6a:	7e c0       	rjmp	.+252    	; 0x1e68 <__vector_36+0x1cc>
    1d6c:	b3 c0       	rjmp	.+358    	; 0x1ed4 <__vector_36+0x238>
    1d6e:	80 3c       	cpi	r24, 0xC0	; 192
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <__vector_36+0xd8>
    1d72:	a6 c0       	rjmp	.+332    	; 0x1ec0 <__vector_36+0x224>
    1d74:	88 3c       	cpi	r24, 0xC8	; 200
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <__vector_36+0xde>
    1d78:	a3 c0       	rjmp	.+326    	; 0x1ec0 <__vector_36+0x224>
    1d7a:	88 3b       	cpi	r24, 0xB8	; 184
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <__vector_36+0xe4>
    1d7e:	89 c0       	rjmp	.+274    	; 0x1e92 <__vector_36+0x1f6>
    1d80:	a9 c0       	rjmp	.+338    	; 0x1ed4 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1d82:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <twi_slarw>
    1d86:	10 c0       	rjmp	.+32     	; 0x1da8 <__vector_36+0x10c>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1d88:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <twi_masterBufferIndex>
    1d8c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <twi_masterBufferLength>
    1d90:	98 17       	cp	r25, r24
    1d92:	70 f5       	brcc	.+92     	; 0x1df0 <__vector_36+0x154>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1d94:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <twi_masterBufferIndex>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	8e 0f       	add	r24, r30
    1d9c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <twi_masterBufferIndex>
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	e5 55       	subi	r30, 0x55	; 85
    1da4:	fc 4f       	sbci	r31, 0xFC	; 252
    1da6:	80 81       	ld	r24, Z
    1da8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1dac:	85 ec       	ldi	r24, 0xC5	; 197
    1dae:	85 c0       	rjmp	.+266    	; 0x1eba <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1db0:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <twi_error>
    1db4:	8d c0       	rjmp	.+282    	; 0x1ed0 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1db6:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <twi_masterBufferIndex>
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <twi_masterBufferIndex>
    1dc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	e5 55       	subi	r30, 0x55	; 85
    1dca:	fc 4f       	sbci	r31, 0xFC	; 252
    1dcc:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1dce:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <twi_masterBufferIndex>
    1dd2:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <twi_masterBufferLength>
    1dd6:	6d c0       	rjmp	.+218    	; 0x1eb2 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1dd8:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <twi_masterBufferIndex>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	8e 0f       	add	r24, r30
    1de0:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <twi_masterBufferIndex>
    1de4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	e5 55       	subi	r30, 0x55	; 85
    1dec:	fc 4f       	sbci	r31, 0xFC	; 252
    1dee:	80 83       	st	Z, r24
	if (twi_sendStop)
    1df0:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_sendStop>
    1df4:	81 11       	cpse	r24, r1
    1df6:	6c c0       	rjmp	.+216    	; 0x1ed0 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1dfe:	84 ea       	ldi	r24, 0xA4	; 164
    1e00:	60 c0       	rjmp	.+192    	; 0x1ec2 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e08:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <twi_rxBufferIndex>
    1e0c:	cf cf       	rjmp	.-98     	; 0x1dac <__vector_36+0x110>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e0e:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_rxBufferIndex>
    1e12:	80 32       	cpi	r24, 0x20	; 32
    1e14:	08 f0       	brcs	.+2      	; 0x1e18 <__vector_36+0x17c>
    1e16:	50 c0       	rjmp	.+160    	; 0x1eb8 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1e18:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <twi_rxBufferIndex>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	8e 0f       	add	r24, r30
    1e20:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <twi_rxBufferIndex>
    1e24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	e9 59       	subi	r30, 0x99	; 153
    1e2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2e:	80 83       	st	Z, r24
    1e30:	bd cf       	rjmp	.-134    	; 0x1dac <__vector_36+0x110>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e32:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <twi_rxBufferIndex>
    1e36:	80 32       	cpi	r24, 0x20	; 32
    1e38:	30 f4       	brcc	.+12     	; 0x1e46 <__vector_36+0x1aa>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1e3a:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <twi_rxBufferIndex>
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	e9 59       	subi	r30, 0x99	; 153
    1e42:	fc 4f       	sbci	r31, 0xFC	; 252
    1e44:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    1e46:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1e4a:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <twi_rxBufferIndex>
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	e0 91 cb 03 	lds	r30, 0x03CB	; 0x8003cb <twi_onSlaveReceive>
    1e54:	f0 91 cc 03 	lds	r31, 0x03CC	; 0x8003cc <twi_onSlaveReceive+0x1>
    1e58:	87 e6       	ldi	r24, 0x67	; 103
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1e5e:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <twi_rxBufferIndex>
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1e62:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <twi_releaseBus>
      break;
    1e66:	36 c0       	rjmp	.+108    	; 0x1ed4 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1e68:	84 e0       	ldi	r24, 0x04	; 4
    1e6a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1e6e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1e72:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1e76:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <twi_onSlaveTransmit>
    1e7a:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <twi_onSlaveTransmit+0x1>
    1e7e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1e80:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_txBufferLength>
    1e84:	81 11       	cpse	r24, r1
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1e8e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1e92:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_txBufferIndex>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	8e 0f       	add	r24, r30
    1e9a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_txBufferIndex>
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	e7 57       	subi	r30, 0x77	; 119
    1ea2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1eaa:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_txBufferIndex>
    1eae:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_txBufferLength>
    1eb2:	98 17       	cp	r25, r24
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <__vector_36+0x21c>
    1eb6:	7a cf       	rjmp	.-268    	; 0x1dac <__vector_36+0x110>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1eb8:	85 e8       	ldi	r24, 0x85	; 133
    1eba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ec0:	85 ec       	ldi	r24, 0xC5	; 197
    1ec2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ec6:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <twi_state>
      break;
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ecc:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <twi_error>
      twi_stop();
    1ed0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <twi_stop>
      break;
  }
}
    1ed4:	ff 91       	pop	r31
    1ed6:	ef 91       	pop	r30
    1ed8:	bf 91       	pop	r27
    1eda:	af 91       	pop	r26
    1edc:	9f 91       	pop	r25
    1ede:	8f 91       	pop	r24
    1ee0:	7f 91       	pop	r23
    1ee2:	6f 91       	pop	r22
    1ee4:	5f 91       	pop	r21
    1ee6:	4f 91       	pop	r20
    1ee8:	3f 91       	pop	r19
    1eea:	2f 91       	pop	r18
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	0f 90       	pop	r0
    1ef2:	1f 90       	pop	r1
    1ef4:	18 95       	reti

00001ef6 <__udivmodsi4>:
    1ef6:	a1 e2       	ldi	r26, 0x21	; 33
    1ef8:	1a 2e       	mov	r1, r26
    1efa:	aa 1b       	sub	r26, r26
    1efc:	bb 1b       	sub	r27, r27
    1efe:	fd 01       	movw	r30, r26
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <__udivmodsi4_ep>

00001f02 <__udivmodsi4_loop>:
    1f02:	aa 1f       	adc	r26, r26
    1f04:	bb 1f       	adc	r27, r27
    1f06:	ee 1f       	adc	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	a2 17       	cp	r26, r18
    1f0c:	b3 07       	cpc	r27, r19
    1f0e:	e4 07       	cpc	r30, r20
    1f10:	f5 07       	cpc	r31, r21
    1f12:	20 f0       	brcs	.+8      	; 0x1f1c <__udivmodsi4_ep>
    1f14:	a2 1b       	sub	r26, r18
    1f16:	b3 0b       	sbc	r27, r19
    1f18:	e4 0b       	sbc	r30, r20
    1f1a:	f5 0b       	sbc	r31, r21

00001f1c <__udivmodsi4_ep>:
    1f1c:	66 1f       	adc	r22, r22
    1f1e:	77 1f       	adc	r23, r23
    1f20:	88 1f       	adc	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	1a 94       	dec	r1
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <__udivmodsi4_loop>
    1f28:	60 95       	com	r22
    1f2a:	70 95       	com	r23
    1f2c:	80 95       	com	r24
    1f2e:	90 95       	com	r25
    1f30:	9b 01       	movw	r18, r22
    1f32:	ac 01       	movw	r20, r24
    1f34:	bd 01       	movw	r22, r26
    1f36:	cf 01       	movw	r24, r30
    1f38:	08 95       	ret

00001f3a <__tablejump2__>:
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	05 90       	lpm	r0, Z+
    1f40:	f4 91       	lpm	r31, Z
    1f42:	e0 2d       	mov	r30, r0
    1f44:	09 94       	ijmp

00001f46 <sprintf>:
    1f46:	ae e0       	ldi	r26, 0x0E	; 14
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1f4c:	ff e0       	ldi	r31, 0x0F	; 15
    1f4e:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x1c>
    1f52:	0d 89       	ldd	r16, Y+21	; 0x15
    1f54:	1e 89       	ldd	r17, Y+22	; 0x16
    1f56:	86 e0       	ldi	r24, 0x06	; 6
    1f58:	8c 83       	std	Y+4, r24	; 0x04
    1f5a:	1a 83       	std	Y+2, r17	; 0x02
    1f5c:	09 83       	std	Y+1, r16	; 0x01
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	9f e7       	ldi	r25, 0x7F	; 127
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	ae 01       	movw	r20, r28
    1f68:	47 5e       	subi	r20, 0xE7	; 231
    1f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6c:	6f 89       	ldd	r22, Y+23	; 0x17
    1f6e:	78 8d       	ldd	r23, Y+24	; 0x18
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <vfprintf>
    1f78:	ef 81       	ldd	r30, Y+7	; 0x07
    1f7a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f7c:	e0 0f       	add	r30, r16
    1f7e:	f1 1f       	adc	r31, r17
    1f80:	10 82       	st	Z, r1
    1f82:	2e 96       	adiw	r28, 0x0e	; 14
    1f84:	e4 e0       	ldi	r30, 0x04	; 4
    1f86:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x1c>

00001f8a <vfprintf>:
    1f8a:	ab e0       	ldi	r26, 0x0B	; 11
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	eb ec       	ldi	r30, 0xCB	; 203
    1f90:	ff e0       	ldi	r31, 0x0F	; 15
    1f92:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__prologue_saves__>
    1f96:	6c 01       	movw	r12, r24
    1f98:	7b 01       	movw	r14, r22
    1f9a:	8a 01       	movw	r16, r20
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	17 82       	std	Z+7, r1	; 0x07
    1fa0:	16 82       	std	Z+6, r1	; 0x06
    1fa2:	83 81       	ldd	r24, Z+3	; 0x03
    1fa4:	81 ff       	sbrs	r24, 1
    1fa6:	cc c1       	rjmp	.+920    	; 0x2340 <vfprintf+0x3b6>
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	3c 01       	movw	r6, r24
    1fae:	f6 01       	movw	r30, r12
    1fb0:	93 81       	ldd	r25, Z+3	; 0x03
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	93 fd       	sbrc	r25, 3
    1fb6:	85 91       	lpm	r24, Z+
    1fb8:	93 ff       	sbrs	r25, 3
    1fba:	81 91       	ld	r24, Z+
    1fbc:	7f 01       	movw	r14, r30
    1fbe:	88 23       	and	r24, r24
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <vfprintf+0x3a>
    1fc2:	ba c1       	rjmp	.+884    	; 0x2338 <vfprintf+0x3ae>
    1fc4:	85 32       	cpi	r24, 0x25	; 37
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <vfprintf+0x4c>
    1fc8:	93 fd       	sbrc	r25, 3
    1fca:	85 91       	lpm	r24, Z+
    1fcc:	93 ff       	sbrs	r25, 3
    1fce:	81 91       	ld	r24, Z+
    1fd0:	7f 01       	movw	r14, r30
    1fd2:	85 32       	cpi	r24, 0x25	; 37
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <vfprintf+0x56>
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    1fde:	e7 cf       	rjmp	.-50     	; 0x1fae <vfprintf+0x24>
    1fe0:	91 2c       	mov	r9, r1
    1fe2:	21 2c       	mov	r2, r1
    1fe4:	31 2c       	mov	r3, r1
    1fe6:	ff e1       	ldi	r31, 0x1F	; 31
    1fe8:	f3 15       	cp	r31, r3
    1fea:	d8 f0       	brcs	.+54     	; 0x2022 <vfprintf+0x98>
    1fec:	8b 32       	cpi	r24, 0x2B	; 43
    1fee:	79 f0       	breq	.+30     	; 0x200e <vfprintf+0x84>
    1ff0:	38 f4       	brcc	.+14     	; 0x2000 <vfprintf+0x76>
    1ff2:	80 32       	cpi	r24, 0x20	; 32
    1ff4:	79 f0       	breq	.+30     	; 0x2014 <vfprintf+0x8a>
    1ff6:	83 32       	cpi	r24, 0x23	; 35
    1ff8:	a1 f4       	brne	.+40     	; 0x2022 <vfprintf+0x98>
    1ffa:	23 2d       	mov	r18, r3
    1ffc:	20 61       	ori	r18, 0x10	; 16
    1ffe:	1d c0       	rjmp	.+58     	; 0x203a <vfprintf+0xb0>
    2000:	8d 32       	cpi	r24, 0x2D	; 45
    2002:	61 f0       	breq	.+24     	; 0x201c <vfprintf+0x92>
    2004:	80 33       	cpi	r24, 0x30	; 48
    2006:	69 f4       	brne	.+26     	; 0x2022 <vfprintf+0x98>
    2008:	23 2d       	mov	r18, r3
    200a:	21 60       	ori	r18, 0x01	; 1
    200c:	16 c0       	rjmp	.+44     	; 0x203a <vfprintf+0xb0>
    200e:	83 2d       	mov	r24, r3
    2010:	82 60       	ori	r24, 0x02	; 2
    2012:	38 2e       	mov	r3, r24
    2014:	e3 2d       	mov	r30, r3
    2016:	e4 60       	ori	r30, 0x04	; 4
    2018:	3e 2e       	mov	r3, r30
    201a:	2a c0       	rjmp	.+84     	; 0x2070 <vfprintf+0xe6>
    201c:	f3 2d       	mov	r31, r3
    201e:	f8 60       	ori	r31, 0x08	; 8
    2020:	1d c0       	rjmp	.+58     	; 0x205c <vfprintf+0xd2>
    2022:	37 fc       	sbrc	r3, 7
    2024:	2d c0       	rjmp	.+90     	; 0x2080 <vfprintf+0xf6>
    2026:	20 ed       	ldi	r18, 0xD0	; 208
    2028:	28 0f       	add	r18, r24
    202a:	2a 30       	cpi	r18, 0x0A	; 10
    202c:	40 f0       	brcs	.+16     	; 0x203e <vfprintf+0xb4>
    202e:	8e 32       	cpi	r24, 0x2E	; 46
    2030:	b9 f4       	brne	.+46     	; 0x2060 <vfprintf+0xd6>
    2032:	36 fc       	sbrc	r3, 6
    2034:	81 c1       	rjmp	.+770    	; 0x2338 <vfprintf+0x3ae>
    2036:	23 2d       	mov	r18, r3
    2038:	20 64       	ori	r18, 0x40	; 64
    203a:	32 2e       	mov	r3, r18
    203c:	19 c0       	rjmp	.+50     	; 0x2070 <vfprintf+0xe6>
    203e:	36 fe       	sbrs	r3, 6
    2040:	06 c0       	rjmp	.+12     	; 0x204e <vfprintf+0xc4>
    2042:	8a e0       	ldi	r24, 0x0A	; 10
    2044:	98 9e       	mul	r9, r24
    2046:	20 0d       	add	r18, r0
    2048:	11 24       	eor	r1, r1
    204a:	92 2e       	mov	r9, r18
    204c:	11 c0       	rjmp	.+34     	; 0x2070 <vfprintf+0xe6>
    204e:	ea e0       	ldi	r30, 0x0A	; 10
    2050:	2e 9e       	mul	r2, r30
    2052:	20 0d       	add	r18, r0
    2054:	11 24       	eor	r1, r1
    2056:	22 2e       	mov	r2, r18
    2058:	f3 2d       	mov	r31, r3
    205a:	f0 62       	ori	r31, 0x20	; 32
    205c:	3f 2e       	mov	r3, r31
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <vfprintf+0xe6>
    2060:	8c 36       	cpi	r24, 0x6C	; 108
    2062:	21 f4       	brne	.+8      	; 0x206c <vfprintf+0xe2>
    2064:	83 2d       	mov	r24, r3
    2066:	80 68       	ori	r24, 0x80	; 128
    2068:	38 2e       	mov	r3, r24
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <vfprintf+0xe6>
    206c:	88 36       	cpi	r24, 0x68	; 104
    206e:	41 f4       	brne	.+16     	; 0x2080 <vfprintf+0xf6>
    2070:	f7 01       	movw	r30, r14
    2072:	93 fd       	sbrc	r25, 3
    2074:	85 91       	lpm	r24, Z+
    2076:	93 ff       	sbrs	r25, 3
    2078:	81 91       	ld	r24, Z+
    207a:	7f 01       	movw	r14, r30
    207c:	81 11       	cpse	r24, r1
    207e:	b3 cf       	rjmp	.-154    	; 0x1fe6 <vfprintf+0x5c>
    2080:	98 2f       	mov	r25, r24
    2082:	9f 7d       	andi	r25, 0xDF	; 223
    2084:	95 54       	subi	r25, 0x45	; 69
    2086:	93 30       	cpi	r25, 0x03	; 3
    2088:	28 f4       	brcc	.+10     	; 0x2094 <vfprintf+0x10a>
    208a:	0c 5f       	subi	r16, 0xFC	; 252
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	9f e3       	ldi	r25, 0x3F	; 63
    2090:	99 83       	std	Y+1, r25	; 0x01
    2092:	0d c0       	rjmp	.+26     	; 0x20ae <vfprintf+0x124>
    2094:	83 36       	cpi	r24, 0x63	; 99
    2096:	31 f0       	breq	.+12     	; 0x20a4 <vfprintf+0x11a>
    2098:	83 37       	cpi	r24, 0x73	; 115
    209a:	71 f0       	breq	.+28     	; 0x20b8 <vfprintf+0x12e>
    209c:	83 35       	cpi	r24, 0x53	; 83
    209e:	09 f0       	breq	.+2      	; 0x20a2 <vfprintf+0x118>
    20a0:	59 c0       	rjmp	.+178    	; 0x2154 <vfprintf+0x1ca>
    20a2:	21 c0       	rjmp	.+66     	; 0x20e6 <vfprintf+0x15c>
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 81       	ld	r24, Z
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	0e 5f       	subi	r16, 0xFE	; 254
    20ac:	1f 4f       	sbci	r17, 0xFF	; 255
    20ae:	88 24       	eor	r8, r8
    20b0:	83 94       	inc	r8
    20b2:	91 2c       	mov	r9, r1
    20b4:	53 01       	movw	r10, r6
    20b6:	13 c0       	rjmp	.+38     	; 0x20de <vfprintf+0x154>
    20b8:	28 01       	movw	r4, r16
    20ba:	f2 e0       	ldi	r31, 0x02	; 2
    20bc:	4f 0e       	add	r4, r31
    20be:	51 1c       	adc	r5, r1
    20c0:	f8 01       	movw	r30, r16
    20c2:	a0 80       	ld	r10, Z
    20c4:	b1 80       	ldd	r11, Z+1	; 0x01
    20c6:	36 fe       	sbrs	r3, 6
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <vfprintf+0x146>
    20ca:	69 2d       	mov	r22, r9
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <vfprintf+0x14a>
    20d0:	6f ef       	ldi	r22, 0xFF	; 255
    20d2:	7f ef       	ldi	r23, 0xFF	; 255
    20d4:	c5 01       	movw	r24, r10
    20d6:	0e 94 b1 11 	call	0x2362	; 0x2362 <strnlen>
    20da:	4c 01       	movw	r8, r24
    20dc:	82 01       	movw	r16, r4
    20de:	f3 2d       	mov	r31, r3
    20e0:	ff 77       	andi	r31, 0x7F	; 127
    20e2:	3f 2e       	mov	r3, r31
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <vfprintf+0x188>
    20e6:	28 01       	movw	r4, r16
    20e8:	22 e0       	ldi	r18, 0x02	; 2
    20ea:	42 0e       	add	r4, r18
    20ec:	51 1c       	adc	r5, r1
    20ee:	f8 01       	movw	r30, r16
    20f0:	a0 80       	ld	r10, Z
    20f2:	b1 80       	ldd	r11, Z+1	; 0x01
    20f4:	36 fe       	sbrs	r3, 6
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <vfprintf+0x174>
    20f8:	69 2d       	mov	r22, r9
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <vfprintf+0x178>
    20fe:	6f ef       	ldi	r22, 0xFF	; 255
    2100:	7f ef       	ldi	r23, 0xFF	; 255
    2102:	c5 01       	movw	r24, r10
    2104:	0e 94 a6 11 	call	0x234c	; 0x234c <strnlen_P>
    2108:	4c 01       	movw	r8, r24
    210a:	f3 2d       	mov	r31, r3
    210c:	f0 68       	ori	r31, 0x80	; 128
    210e:	3f 2e       	mov	r3, r31
    2110:	82 01       	movw	r16, r4
    2112:	33 fc       	sbrc	r3, 3
    2114:	1b c0       	rjmp	.+54     	; 0x214c <vfprintf+0x1c2>
    2116:	82 2d       	mov	r24, r2
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	88 16       	cp	r8, r24
    211c:	99 06       	cpc	r9, r25
    211e:	b0 f4       	brcc	.+44     	; 0x214c <vfprintf+0x1c2>
    2120:	b6 01       	movw	r22, r12
    2122:	80 e2       	ldi	r24, 0x20	; 32
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    212a:	2a 94       	dec	r2
    212c:	f4 cf       	rjmp	.-24     	; 0x2116 <vfprintf+0x18c>
    212e:	f5 01       	movw	r30, r10
    2130:	37 fc       	sbrc	r3, 7
    2132:	85 91       	lpm	r24, Z+
    2134:	37 fe       	sbrs	r3, 7
    2136:	81 91       	ld	r24, Z+
    2138:	5f 01       	movw	r10, r30
    213a:	b6 01       	movw	r22, r12
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2142:	21 10       	cpse	r2, r1
    2144:	2a 94       	dec	r2
    2146:	21 e0       	ldi	r18, 0x01	; 1
    2148:	82 1a       	sub	r8, r18
    214a:	91 08       	sbc	r9, r1
    214c:	81 14       	cp	r8, r1
    214e:	91 04       	cpc	r9, r1
    2150:	71 f7       	brne	.-36     	; 0x212e <vfprintf+0x1a4>
    2152:	e8 c0       	rjmp	.+464    	; 0x2324 <vfprintf+0x39a>
    2154:	84 36       	cpi	r24, 0x64	; 100
    2156:	11 f0       	breq	.+4      	; 0x215c <vfprintf+0x1d2>
    2158:	89 36       	cpi	r24, 0x69	; 105
    215a:	41 f5       	brne	.+80     	; 0x21ac <vfprintf+0x222>
    215c:	f8 01       	movw	r30, r16
    215e:	37 fe       	sbrs	r3, 7
    2160:	07 c0       	rjmp	.+14     	; 0x2170 <vfprintf+0x1e6>
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	0c 5f       	subi	r16, 0xFC	; 252
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <vfprintf+0x1f6>
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	07 2e       	mov	r0, r23
    2176:	00 0c       	add	r0, r0
    2178:	88 0b       	sbc	r24, r24
    217a:	99 0b       	sbc	r25, r25
    217c:	0e 5f       	subi	r16, 0xFE	; 254
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	f3 2d       	mov	r31, r3
    2182:	ff 76       	andi	r31, 0x6F	; 111
    2184:	3f 2e       	mov	r3, r31
    2186:	97 ff       	sbrs	r25, 7
    2188:	09 c0       	rjmp	.+18     	; 0x219c <vfprintf+0x212>
    218a:	90 95       	com	r25
    218c:	80 95       	com	r24
    218e:	70 95       	com	r23
    2190:	61 95       	neg	r22
    2192:	7f 4f       	sbci	r23, 0xFF	; 255
    2194:	8f 4f       	sbci	r24, 0xFF	; 255
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	f0 68       	ori	r31, 0x80	; 128
    219a:	3f 2e       	mov	r3, r31
    219c:	2a e0       	ldi	r18, 0x0A	; 10
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	a3 01       	movw	r20, r6
    21a2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__ultoa_invert>
    21a6:	88 2e       	mov	r8, r24
    21a8:	86 18       	sub	r8, r6
    21aa:	45 c0       	rjmp	.+138    	; 0x2236 <vfprintf+0x2ac>
    21ac:	85 37       	cpi	r24, 0x75	; 117
    21ae:	31 f4       	brne	.+12     	; 0x21bc <vfprintf+0x232>
    21b0:	23 2d       	mov	r18, r3
    21b2:	2f 7e       	andi	r18, 0xEF	; 239
    21b4:	b2 2e       	mov	r11, r18
    21b6:	2a e0       	ldi	r18, 0x0A	; 10
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	25 c0       	rjmp	.+74     	; 0x2206 <vfprintf+0x27c>
    21bc:	93 2d       	mov	r25, r3
    21be:	99 7f       	andi	r25, 0xF9	; 249
    21c0:	b9 2e       	mov	r11, r25
    21c2:	8f 36       	cpi	r24, 0x6F	; 111
    21c4:	c1 f0       	breq	.+48     	; 0x21f6 <vfprintf+0x26c>
    21c6:	18 f4       	brcc	.+6      	; 0x21ce <vfprintf+0x244>
    21c8:	88 35       	cpi	r24, 0x58	; 88
    21ca:	79 f0       	breq	.+30     	; 0x21ea <vfprintf+0x260>
    21cc:	b5 c0       	rjmp	.+362    	; 0x2338 <vfprintf+0x3ae>
    21ce:	80 37       	cpi	r24, 0x70	; 112
    21d0:	19 f0       	breq	.+6      	; 0x21d8 <vfprintf+0x24e>
    21d2:	88 37       	cpi	r24, 0x78	; 120
    21d4:	21 f0       	breq	.+8      	; 0x21de <vfprintf+0x254>
    21d6:	b0 c0       	rjmp	.+352    	; 0x2338 <vfprintf+0x3ae>
    21d8:	e9 2f       	mov	r30, r25
    21da:	e0 61       	ori	r30, 0x10	; 16
    21dc:	be 2e       	mov	r11, r30
    21de:	b4 fe       	sbrs	r11, 4
    21e0:	0d c0       	rjmp	.+26     	; 0x21fc <vfprintf+0x272>
    21e2:	fb 2d       	mov	r31, r11
    21e4:	f4 60       	ori	r31, 0x04	; 4
    21e6:	bf 2e       	mov	r11, r31
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <vfprintf+0x272>
    21ea:	34 fe       	sbrs	r3, 4
    21ec:	0a c0       	rjmp	.+20     	; 0x2202 <vfprintf+0x278>
    21ee:	29 2f       	mov	r18, r25
    21f0:	26 60       	ori	r18, 0x06	; 6
    21f2:	b2 2e       	mov	r11, r18
    21f4:	06 c0       	rjmp	.+12     	; 0x2202 <vfprintf+0x278>
    21f6:	28 e0       	ldi	r18, 0x08	; 8
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <vfprintf+0x27c>
    21fc:	20 e1       	ldi	r18, 0x10	; 16
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <vfprintf+0x27c>
    2202:	20 e1       	ldi	r18, 0x10	; 16
    2204:	32 e0       	ldi	r19, 0x02	; 2
    2206:	f8 01       	movw	r30, r16
    2208:	b7 fe       	sbrs	r11, 7
    220a:	07 c0       	rjmp	.+14     	; 0x221a <vfprintf+0x290>
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	0c 5f       	subi	r16, 0xFC	; 252
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <vfprintf+0x29c>
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 5f       	subi	r16, 0xFE	; 254
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	a3 01       	movw	r20, r6
    2228:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__ultoa_invert>
    222c:	88 2e       	mov	r8, r24
    222e:	86 18       	sub	r8, r6
    2230:	fb 2d       	mov	r31, r11
    2232:	ff 77       	andi	r31, 0x7F	; 127
    2234:	3f 2e       	mov	r3, r31
    2236:	36 fe       	sbrs	r3, 6
    2238:	0d c0       	rjmp	.+26     	; 0x2254 <vfprintf+0x2ca>
    223a:	23 2d       	mov	r18, r3
    223c:	2e 7f       	andi	r18, 0xFE	; 254
    223e:	a2 2e       	mov	r10, r18
    2240:	89 14       	cp	r8, r9
    2242:	58 f4       	brcc	.+22     	; 0x225a <vfprintf+0x2d0>
    2244:	34 fe       	sbrs	r3, 4
    2246:	0b c0       	rjmp	.+22     	; 0x225e <vfprintf+0x2d4>
    2248:	32 fc       	sbrc	r3, 2
    224a:	09 c0       	rjmp	.+18     	; 0x225e <vfprintf+0x2d4>
    224c:	83 2d       	mov	r24, r3
    224e:	8e 7e       	andi	r24, 0xEE	; 238
    2250:	a8 2e       	mov	r10, r24
    2252:	05 c0       	rjmp	.+10     	; 0x225e <vfprintf+0x2d4>
    2254:	b8 2c       	mov	r11, r8
    2256:	a3 2c       	mov	r10, r3
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <vfprintf+0x2d6>
    225a:	b8 2c       	mov	r11, r8
    225c:	01 c0       	rjmp	.+2      	; 0x2260 <vfprintf+0x2d6>
    225e:	b9 2c       	mov	r11, r9
    2260:	a4 fe       	sbrs	r10, 4
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <vfprintf+0x2f8>
    2264:	fe 01       	movw	r30, r28
    2266:	e8 0d       	add	r30, r8
    2268:	f1 1d       	adc	r31, r1
    226a:	80 81       	ld	r24, Z
    226c:	80 33       	cpi	r24, 0x30	; 48
    226e:	21 f4       	brne	.+8      	; 0x2278 <vfprintf+0x2ee>
    2270:	9a 2d       	mov	r25, r10
    2272:	99 7e       	andi	r25, 0xE9	; 233
    2274:	a9 2e       	mov	r10, r25
    2276:	09 c0       	rjmp	.+18     	; 0x228a <vfprintf+0x300>
    2278:	a2 fe       	sbrs	r10, 2
    227a:	06 c0       	rjmp	.+12     	; 0x2288 <vfprintf+0x2fe>
    227c:	b3 94       	inc	r11
    227e:	b3 94       	inc	r11
    2280:	04 c0       	rjmp	.+8      	; 0x228a <vfprintf+0x300>
    2282:	8a 2d       	mov	r24, r10
    2284:	86 78       	andi	r24, 0x86	; 134
    2286:	09 f0       	breq	.+2      	; 0x228a <vfprintf+0x300>
    2288:	b3 94       	inc	r11
    228a:	a3 fc       	sbrc	r10, 3
    228c:	11 c0       	rjmp	.+34     	; 0x22b0 <vfprintf+0x326>
    228e:	a0 fe       	sbrs	r10, 0
    2290:	06 c0       	rjmp	.+12     	; 0x229e <vfprintf+0x314>
    2292:	b2 14       	cp	r11, r2
    2294:	88 f4       	brcc	.+34     	; 0x22b8 <vfprintf+0x32e>
    2296:	28 0c       	add	r2, r8
    2298:	92 2c       	mov	r9, r2
    229a:	9b 18       	sub	r9, r11
    229c:	0e c0       	rjmp	.+28     	; 0x22ba <vfprintf+0x330>
    229e:	b2 14       	cp	r11, r2
    22a0:	60 f4       	brcc	.+24     	; 0x22ba <vfprintf+0x330>
    22a2:	b6 01       	movw	r22, r12
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    22ac:	b3 94       	inc	r11
    22ae:	f7 cf       	rjmp	.-18     	; 0x229e <vfprintf+0x314>
    22b0:	b2 14       	cp	r11, r2
    22b2:	18 f4       	brcc	.+6      	; 0x22ba <vfprintf+0x330>
    22b4:	2b 18       	sub	r2, r11
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <vfprintf+0x332>
    22b8:	98 2c       	mov	r9, r8
    22ba:	21 2c       	mov	r2, r1
    22bc:	a4 fe       	sbrs	r10, 4
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <vfprintf+0x356>
    22c0:	b6 01       	movw	r22, r12
    22c2:	80 e3       	ldi	r24, 0x30	; 48
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    22ca:	a2 fe       	sbrs	r10, 2
    22cc:	17 c0       	rjmp	.+46     	; 0x22fc <vfprintf+0x372>
    22ce:	a1 fc       	sbrc	r10, 1
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <vfprintf+0x34e>
    22d2:	88 e7       	ldi	r24, 0x78	; 120
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <vfprintf+0x352>
    22d8:	88 e5       	ldi	r24, 0x58	; 88
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	b6 01       	movw	r22, r12
    22de:	0c c0       	rjmp	.+24     	; 0x22f8 <vfprintf+0x36e>
    22e0:	8a 2d       	mov	r24, r10
    22e2:	86 78       	andi	r24, 0x86	; 134
    22e4:	59 f0       	breq	.+22     	; 0x22fc <vfprintf+0x372>
    22e6:	a1 fe       	sbrs	r10, 1
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <vfprintf+0x364>
    22ea:	8b e2       	ldi	r24, 0x2B	; 43
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <vfprintf+0x366>
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	a7 fc       	sbrc	r10, 7
    22f2:	8d e2       	ldi	r24, 0x2D	; 45
    22f4:	b6 01       	movw	r22, r12
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    22fc:	89 14       	cp	r8, r9
    22fe:	38 f4       	brcc	.+14     	; 0x230e <vfprintf+0x384>
    2300:	b6 01       	movw	r22, r12
    2302:	80 e3       	ldi	r24, 0x30	; 48
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    230a:	9a 94       	dec	r9
    230c:	f7 cf       	rjmp	.-18     	; 0x22fc <vfprintf+0x372>
    230e:	8a 94       	dec	r8
    2310:	f3 01       	movw	r30, r6
    2312:	e8 0d       	add	r30, r8
    2314:	f1 1d       	adc	r31, r1
    2316:	80 81       	ld	r24, Z
    2318:	b6 01       	movw	r22, r12
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2320:	81 10       	cpse	r8, r1
    2322:	f5 cf       	rjmp	.-22     	; 0x230e <vfprintf+0x384>
    2324:	22 20       	and	r2, r2
    2326:	09 f4       	brne	.+2      	; 0x232a <vfprintf+0x3a0>
    2328:	42 ce       	rjmp	.-892    	; 0x1fae <vfprintf+0x24>
    232a:	b6 01       	movw	r22, r12
    232c:	80 e2       	ldi	r24, 0x20	; 32
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 bc 11 	call	0x2378	; 0x2378 <fputc>
    2334:	2a 94       	dec	r2
    2336:	f6 cf       	rjmp	.-20     	; 0x2324 <vfprintf+0x39a>
    2338:	f6 01       	movw	r30, r12
    233a:	86 81       	ldd	r24, Z+6	; 0x06
    233c:	97 81       	ldd	r25, Z+7	; 0x07
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <vfprintf+0x3ba>
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	9f ef       	ldi	r25, 0xFF	; 255
    2344:	2b 96       	adiw	r28, 0x0b	; 11
    2346:	e2 e1       	ldi	r30, 0x12	; 18
    2348:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__epilogue_restores__>

0000234c <strnlen_P>:
    234c:	fc 01       	movw	r30, r24
    234e:	05 90       	lpm	r0, Z+
    2350:	61 50       	subi	r22, 0x01	; 1
    2352:	70 40       	sbci	r23, 0x00	; 0
    2354:	01 10       	cpse	r0, r1
    2356:	d8 f7       	brcc	.-10     	; 0x234e <strnlen_P+0x2>
    2358:	80 95       	com	r24
    235a:	90 95       	com	r25
    235c:	8e 0f       	add	r24, r30
    235e:	9f 1f       	adc	r25, r31
    2360:	08 95       	ret

00002362 <strnlen>:
    2362:	fc 01       	movw	r30, r24
    2364:	61 50       	subi	r22, 0x01	; 1
    2366:	70 40       	sbci	r23, 0x00	; 0
    2368:	01 90       	ld	r0, Z+
    236a:	01 10       	cpse	r0, r1
    236c:	d8 f7       	brcc	.-10     	; 0x2364 <strnlen+0x2>
    236e:	80 95       	com	r24
    2370:	90 95       	com	r25
    2372:	8e 0f       	add	r24, r30
    2374:	9f 1f       	adc	r25, r31
    2376:	08 95       	ret

00002378 <fputc>:
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	fb 01       	movw	r30, r22
    2382:	23 81       	ldd	r18, Z+3	; 0x03
    2384:	21 fd       	sbrc	r18, 1
    2386:	03 c0       	rjmp	.+6      	; 0x238e <fputc+0x16>
    2388:	8f ef       	ldi	r24, 0xFF	; 255
    238a:	9f ef       	ldi	r25, 0xFF	; 255
    238c:	2c c0       	rjmp	.+88     	; 0x23e6 <fputc+0x6e>
    238e:	22 ff       	sbrs	r18, 2
    2390:	16 c0       	rjmp	.+44     	; 0x23be <fputc+0x46>
    2392:	46 81       	ldd	r20, Z+6	; 0x06
    2394:	57 81       	ldd	r21, Z+7	; 0x07
    2396:	24 81       	ldd	r18, Z+4	; 0x04
    2398:	35 81       	ldd	r19, Z+5	; 0x05
    239a:	42 17       	cp	r20, r18
    239c:	53 07       	cpc	r21, r19
    239e:	44 f4       	brge	.+16     	; 0x23b0 <fputc+0x38>
    23a0:	a0 81       	ld	r26, Z
    23a2:	b1 81       	ldd	r27, Z+1	; 0x01
    23a4:	9d 01       	movw	r18, r26
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	31 83       	std	Z+1, r19	; 0x01
    23ac:	20 83       	st	Z, r18
    23ae:	8c 93       	st	X, r24
    23b0:	26 81       	ldd	r18, Z+6	; 0x06
    23b2:	37 81       	ldd	r19, Z+7	; 0x07
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	37 83       	std	Z+7, r19	; 0x07
    23ba:	26 83       	std	Z+6, r18	; 0x06
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <fputc+0x6e>
    23be:	8b 01       	movw	r16, r22
    23c0:	ec 01       	movw	r28, r24
    23c2:	fb 01       	movw	r30, r22
    23c4:	00 84       	ldd	r0, Z+8	; 0x08
    23c6:	f1 85       	ldd	r31, Z+9	; 0x09
    23c8:	e0 2d       	mov	r30, r0
    23ca:	09 95       	icall
    23cc:	89 2b       	or	r24, r25
    23ce:	e1 f6       	brne	.-72     	; 0x2388 <fputc+0x10>
    23d0:	d8 01       	movw	r26, r16
    23d2:	16 96       	adiw	r26, 0x06	; 6
    23d4:	8d 91       	ld	r24, X+
    23d6:	9c 91       	ld	r25, X
    23d8:	17 97       	sbiw	r26, 0x07	; 7
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	17 96       	adiw	r26, 0x07	; 7
    23de:	9c 93       	st	X, r25
    23e0:	8e 93       	st	-X, r24
    23e2:	16 97       	sbiw	r26, 0x06	; 6
    23e4:	ce 01       	movw	r24, r28
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	08 95       	ret

000023f0 <__ultoa_invert>:
    23f0:	fa 01       	movw	r30, r20
    23f2:	aa 27       	eor	r26, r26
    23f4:	28 30       	cpi	r18, 0x08	; 8
    23f6:	51 f1       	breq	.+84     	; 0x244c <__ultoa_invert+0x5c>
    23f8:	20 31       	cpi	r18, 0x10	; 16
    23fa:	81 f1       	breq	.+96     	; 0x245c <__ultoa_invert+0x6c>
    23fc:	e8 94       	clt
    23fe:	6f 93       	push	r22
    2400:	6e 7f       	andi	r22, 0xFE	; 254
    2402:	6e 5f       	subi	r22, 0xFE	; 254
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	8f 4f       	sbci	r24, 0xFF	; 255
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
    240a:	af 4f       	sbci	r26, 0xFF	; 255
    240c:	b1 e0       	ldi	r27, 0x01	; 1
    240e:	3e d0       	rcall	.+124    	; 0x248c <__ultoa_invert+0x9c>
    2410:	b4 e0       	ldi	r27, 0x04	; 4
    2412:	3c d0       	rcall	.+120    	; 0x248c <__ultoa_invert+0x9c>
    2414:	67 0f       	add	r22, r23
    2416:	78 1f       	adc	r23, r24
    2418:	89 1f       	adc	r24, r25
    241a:	9a 1f       	adc	r25, r26
    241c:	a1 1d       	adc	r26, r1
    241e:	68 0f       	add	r22, r24
    2420:	79 1f       	adc	r23, r25
    2422:	8a 1f       	adc	r24, r26
    2424:	91 1d       	adc	r25, r1
    2426:	a1 1d       	adc	r26, r1
    2428:	6a 0f       	add	r22, r26
    242a:	71 1d       	adc	r23, r1
    242c:	81 1d       	adc	r24, r1
    242e:	91 1d       	adc	r25, r1
    2430:	a1 1d       	adc	r26, r1
    2432:	20 d0       	rcall	.+64     	; 0x2474 <__ultoa_invert+0x84>
    2434:	09 f4       	brne	.+2      	; 0x2438 <__ultoa_invert+0x48>
    2436:	68 94       	set
    2438:	3f 91       	pop	r19
    243a:	2a e0       	ldi	r18, 0x0A	; 10
    243c:	26 9f       	mul	r18, r22
    243e:	11 24       	eor	r1, r1
    2440:	30 19       	sub	r19, r0
    2442:	30 5d       	subi	r19, 0xD0	; 208
    2444:	31 93       	st	Z+, r19
    2446:	de f6       	brtc	.-74     	; 0x23fe <__ultoa_invert+0xe>
    2448:	cf 01       	movw	r24, r30
    244a:	08 95       	ret
    244c:	46 2f       	mov	r20, r22
    244e:	47 70       	andi	r20, 0x07	; 7
    2450:	40 5d       	subi	r20, 0xD0	; 208
    2452:	41 93       	st	Z+, r20
    2454:	b3 e0       	ldi	r27, 0x03	; 3
    2456:	0f d0       	rcall	.+30     	; 0x2476 <__ultoa_invert+0x86>
    2458:	c9 f7       	brne	.-14     	; 0x244c <__ultoa_invert+0x5c>
    245a:	f6 cf       	rjmp	.-20     	; 0x2448 <__ultoa_invert+0x58>
    245c:	46 2f       	mov	r20, r22
    245e:	4f 70       	andi	r20, 0x0F	; 15
    2460:	40 5d       	subi	r20, 0xD0	; 208
    2462:	4a 33       	cpi	r20, 0x3A	; 58
    2464:	18 f0       	brcs	.+6      	; 0x246c <__ultoa_invert+0x7c>
    2466:	49 5d       	subi	r20, 0xD9	; 217
    2468:	31 fd       	sbrc	r19, 1
    246a:	40 52       	subi	r20, 0x20	; 32
    246c:	41 93       	st	Z+, r20
    246e:	02 d0       	rcall	.+4      	; 0x2474 <__ultoa_invert+0x84>
    2470:	a9 f7       	brne	.-22     	; 0x245c <__ultoa_invert+0x6c>
    2472:	ea cf       	rjmp	.-44     	; 0x2448 <__ultoa_invert+0x58>
    2474:	b4 e0       	ldi	r27, 0x04	; 4
    2476:	a6 95       	lsr	r26
    2478:	97 95       	ror	r25
    247a:	87 95       	ror	r24
    247c:	77 95       	ror	r23
    247e:	67 95       	ror	r22
    2480:	ba 95       	dec	r27
    2482:	c9 f7       	brne	.-14     	; 0x2476 <__ultoa_invert+0x86>
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	61 05       	cpc	r22, r1
    2488:	71 05       	cpc	r23, r1
    248a:	08 95       	ret
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	0a 2e       	mov	r0, r26
    2492:	06 94       	lsr	r0
    2494:	57 95       	ror	r21
    2496:	47 95       	ror	r20
    2498:	37 95       	ror	r19
    249a:	27 95       	ror	r18
    249c:	ba 95       	dec	r27
    249e:	c9 f7       	brne	.-14     	; 0x2492 <__ultoa_invert+0xa2>
    24a0:	62 0f       	add	r22, r18
    24a2:	73 1f       	adc	r23, r19
    24a4:	84 1f       	adc	r24, r20
    24a6:	95 1f       	adc	r25, r21
    24a8:	a0 1d       	adc	r26, r0
    24aa:	08 95       	ret

000024ac <eeprom_read_byte>:
    24ac:	f9 99       	sbic	0x1f, 1	; 31
    24ae:	fe cf       	rjmp	.-4      	; 0x24ac <eeprom_read_byte>
    24b0:	92 bd       	out	0x22, r25	; 34
    24b2:	81 bd       	out	0x21, r24	; 33
    24b4:	f8 9a       	sbi	0x1f, 0	; 31
    24b6:	99 27       	eor	r25, r25
    24b8:	80 b5       	in	r24, 0x20	; 32
    24ba:	08 95       	ret

000024bc <eeprom_write_byte>:
    24bc:	26 2f       	mov	r18, r22

000024be <eeprom_write_r18>:
    24be:	f9 99       	sbic	0x1f, 1	; 31
    24c0:	fe cf       	rjmp	.-4      	; 0x24be <eeprom_write_r18>
    24c2:	1f ba       	out	0x1f, r1	; 31
    24c4:	92 bd       	out	0x22, r25	; 34
    24c6:	81 bd       	out	0x21, r24	; 33
    24c8:	20 bd       	out	0x20, r18	; 32
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	fa 9a       	sbi	0x1f, 2	; 31
    24d0:	f9 9a       	sbi	0x1f, 1	; 31
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	08 95       	ret

000024d8 <__prologue_saves__>:
    24d8:	2f 92       	push	r2
    24da:	3f 92       	push	r3
    24dc:	4f 92       	push	r4
    24de:	5f 92       	push	r5
    24e0:	6f 92       	push	r6
    24e2:	7f 92       	push	r7
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	ca 1b       	sub	r28, r26
    2502:	db 0b       	sbc	r29, r27
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	09 94       	ijmp

00002510 <__epilogue_restores__>:
    2510:	2a 88       	ldd	r2, Y+18	; 0x12
    2512:	39 88       	ldd	r3, Y+17	; 0x11
    2514:	48 88       	ldd	r4, Y+16	; 0x10
    2516:	5f 84       	ldd	r5, Y+15	; 0x0f
    2518:	6e 84       	ldd	r6, Y+14	; 0x0e
    251a:	7d 84       	ldd	r7, Y+13	; 0x0d
    251c:	8c 84       	ldd	r8, Y+12	; 0x0c
    251e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2520:	aa 84       	ldd	r10, Y+10	; 0x0a
    2522:	b9 84       	ldd	r11, Y+9	; 0x09
    2524:	c8 84       	ldd	r12, Y+8	; 0x08
    2526:	df 80       	ldd	r13, Y+7	; 0x07
    2528:	ee 80       	ldd	r14, Y+6	; 0x06
    252a:	fd 80       	ldd	r15, Y+5	; 0x05
    252c:	0c 81       	ldd	r16, Y+4	; 0x04
    252e:	1b 81       	ldd	r17, Y+3	; 0x03
    2530:	aa 81       	ldd	r26, Y+2	; 0x02
    2532:	b9 81       	ldd	r27, Y+1	; 0x01
    2534:	ce 0f       	add	r28, r30
    2536:	d1 1d       	adc	r29, r1
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	ed 01       	movw	r28, r26
    2544:	08 95       	ret

00002546 <_exit>:
    2546:	f8 94       	cli

00002548 <__stop_program>:
    2548:	ff cf       	rjmp	.-2      	; 0x2548 <__stop_program>
